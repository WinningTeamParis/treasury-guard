{"id":"d4dbb4b46ecac66e111c8fecdf431b32","_format":"hh-sol-build-info-1","solcVersion":"0.8.18","solcLongVersion":"0.8.18+commit.87f61d96","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@safe-global/safe-core-protocol/contracts/DataTypes.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.18;\n\nstruct SafeProtocolAction {\n    address payable to;\n    uint256 value;\n    bytes data;\n}\n\nstruct SafeTransaction {\n    SafeProtocolAction[] actions;\n    uint256 nonce;\n    bytes32 metaHash;\n}\n\nstruct SafeRootAccess {\n    SafeProtocolAction action;\n    uint256 nonce;\n    bytes32 metaHash;\n}\n"},"@safe-global/safe-core-protocol/contracts/interfaces/Accounts.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.18;\n\n/**\n * @title ISafe Declares the functions that are called on a Safe by Safe protocol.\n */\ninterface ISafe {\n    function execTransactionFromModule(\n        address payable to,\n        uint256 value,\n        bytes calldata data,\n        uint8 operation\n    ) external returns (bool success);\n\n    function execTransactionFromModuleReturnData(\n        address to,\n        uint256 value,\n        bytes memory data,\n        uint8 operation\n    ) external returns (bool success, bytes memory returnData);\n}\n"},"@safe-global/safe-core-protocol/contracts/interfaces/Integrations.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.18;\nimport {ISafe} from \"./Accounts.sol\";\nimport {SafeTransaction, SafeRootAccess} from \"../DataTypes.sol\";\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @title ISafeProtocolStaticFunctionHandler - An interface that a Safe functionhandler should implement\n * @notice In Safe protocol, a function handler can be used to add additional functionality to a Safe.\n *         TODO: Add more explaination.\n */\ninterface ISafeProtocolFunctionHandler {\n    /**\n     * @notice TODO: Add more explaination\n     * @param safe A Safe instance\n     * @param sender Address of the sender\n     * @param value Amount of ETH\n     * @param data Arbitrary length bytes\n     * @return result Arbitrary length bytes containing result of the operation\n     */\n    function handle(ISafe safe, address sender, uint256 value, bytes calldata data) external returns (bytes memory result);\n}\n\n/**\n * @title ISafeProtocolStaticFunctionHandler - An interface that a Safe functionhandler should implement in case when handling static calls\n * @notice In Safe protocol, a function handler can be used to add additional functionality to a Safe.\n *         TODO: Add more explaination.\n */\ninterface ISafeProtocolStaticFunctionHandler {\n    /**\n     * @notice TODO: Add more explaination\n     * @param safe A Safe instance\n     * @param sender Address of the sender\n     * @param value Amount of ETH\n     * @param data Arbitrary length bytes\n     * @return result Arbitrary length bytes containing result of the operation\n     */\n    function handle(ISafe safe, address sender, uint256 value, bytes calldata data) external view returns (bytes memory result);\n}\n\n/**\n * @title ISafeProtocolHooks - An interface that a contract should implement to be enabled as hooks.\n * @notice In Safe protocol, hooks can approve or deny transactions based on the logic it implements.\n */\ninterface ISafeProtocolHooks is IERC165 {\n    /**\n     * @notice A function that will be called by a Safe before the execution of a transaction if the hooks are enabled\n     * @dev Add custom logic in this function to validate the pre-state and contents of transaction for non-root access.\n     * @param safe A Safe instance\n     * @param tx A struct of type SafeTransaction that contains the details of the transaction.\n     * @param executionType uint256\n     * @param executionMeta Arbitrary length of bytes\n     * @return preCheckData bytes\n     */\n    function preCheck(\n        ISafe safe,\n        SafeTransaction calldata tx,\n        uint256 executionType,\n        bytes calldata executionMeta\n    ) external returns (bytes memory preCheckData);\n\n    /**\n     * @notice A function that will be called by a safe before the execution of a transaction if the hooks are enabled and\n     *         transaction requies tool access.\n     * @dev Add custom logic in this function to validate the pre-state and contents of transaction for root access.\n     * @param safe A Safe instance\n     * @param rootAccess DataTypes.SafeRootAccess\n     * @param executionType uint256\n     * @param executionMeta bytes\n     * @return preCheckData bytes\n     */\n    function preCheckRootAccess(\n        ISafe safe,\n        SafeRootAccess calldata rootAccess,\n        uint256 executionType,\n        bytes calldata executionMeta\n    ) external returns (bytes memory preCheckData);\n\n    /**\n     * @notice A function that will be called by a safe after the execution of a transaction if the hooks are enabled. Hooks should revert if the post state of after the transaction is not as expected.\n     * @dev Add custom logic in this function to validate the post-state after the transaction is executed.\n     * @param safe ISafe\n     * @param success bool\n     * @param preCheckData Arbitrary length bytes that was returned by during pre-check of the transaction.\n     */\n    function postCheck(ISafe safe, bool success, bytes calldata preCheckData) external;\n}\n\n/**\n * @title ISafeProtocolPlugin - An interface that a Safe plugin should implement\n */\ninterface ISafeProtocolPlugin {\n    /**\n     * @notice A funtion that returns name of the plugin\n     * @return name string name of the plugin\n     */\n    function name() external view returns (string memory name);\n\n    /**\n     * @notice A funtion that returns version of the plugin\n     * @return version string version of the plugin\n     */\n    function version() external view returns (string memory version);\n\n    /**\n     * @notice A funtion that returns version of the plugin.\n     *         TODO: Define types of meta provider and possible values of location in each of the cases.\n     * @return providerType uint256 Type of meta provider\n     * @return location bytes\n     */\n    function metaProvider() external view returns (uint256 providerType, bytes memory location);\n\n    /**\n     * @notice A function that indicates if the plugin requires root access to a Safe.\n     * @return requiresRootAccess True if root access is required, false otherwise.\n     */\n    function requiresRootAccess() external view returns (bool requiresRootAccess);\n}\n"},"contracts/TestHook.sol":{"content":"import {ISafeProtocolHooks} from \"@safe-global/safe-core-protocol/contracts/interfaces/Integrations.sol\";\nimport {ISafe} from \"@safe-global/safe-core-protocol/contracts/interfaces/Accounts.sol\";\nimport {SafeTransaction} from \"@safe-global/safe-core-protocol/contracts/DataTypes.sol\";\nimport {SafeRootAccess} from \"@safe-global/safe-core-protocol/contracts/DataTypes.sol\";\n\ncontract TestHook is ISafeProtocolHooks {\n\n    event PreCheckCalled(address sender, uint256 executionType, bytes executionMeta);\n    event PostCheckCalled(address sender, bool success, bytes preCheckData);\n    event PreCheckRootAccessCalled(address sender, uint256 executionType, bytes executionMeta);\n\n    /**\n     * @notice A function that will be called by a Safe before the execution of a transaction if the hooks are enabled\n     * @dev Add custom logic in this function to validate the pre-state and contents of transaction for non-root access.\n     * @param safe A Safe instance\n     * @param tx A struct of type SafeTransaction that contains the details of the transaction.\n     * @param executionType uint256\n     * @param executionMeta Arbitrary length of bytes\n     * @return preCheckData bytes\n     */\n    function preCheck(\n        ISafe safe,\n        SafeTransaction calldata tx,\n        uint256 executionType,\n        bytes calldata executionMeta\n    ) external returns (bytes memory preCheckData) {\n        emit PreCheckCalled(msg.sender, executionType, executionMeta);\n    }\n\n    /**\n     * @notice A function that will be called by a safe before the execution of a transaction if the hooks are enabled and\n     *         transaction requies tool access.\n     * @dev Add custom logic in this function to validate the pre-state and contents of transaction for root access.\n     * @param safe A Safe instance\n     * @param rootAccess DataTypes.SafeRootAccess\n     * @param executionType uint256\n     * @param executionMeta bytes\n     * @return preCheckData bytes\n     */\n    function preCheckRootAccess(\n        ISafe safe,\n        SafeRootAccess calldata rootAccess,\n        uint256 executionType,\n        bytes calldata executionMeta\n    ) external returns (bytes memory preCheckData) {\n        emit PreCheckRootAccessCalled(msg.sender, executionType, executionMeta);\n    }\n\n    /**\n     * @notice A function that will be called by a safe after the execution of a transaction if the hooks are enabled. Hooks should revert if the post state of after the transaction is not as expected.\n     * @dev Add custom logic in this function to validate the post-state after the transaction is executed.\n     * @param safe ISafe\n     * @param success bool\n     * @param preCheckData Arbitrary length bytes that was returned by during pre-check of the transaction.\n     */\n    function postCheck(ISafe safe, bool success, bytes calldata preCheckData) external {\n        emit PostCheckCalled(msg.sender, success, preCheckData);\n    }\n\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return true;\n    }\n}"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/TestHook.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/TestHook.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"3420","formattedMessage":"Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.18;\"\n--> contracts/TestHook.sol\n\n","message":"Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.18;\"","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/TestHook.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"2319","formattedMessage":"Warning: This declaration shadows a builtin symbol.\n  --> contracts/TestHook.sol:23:9:\n   |\n23 |         SafeTransaction calldata tx,\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","message":"This declaration shadows a builtin symbol.","severity":"warning","sourceLocation":{"end":1265,"file":"contracts/TestHook.sol","start":1238},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/TestHook.sol:22:9:\n   |\n22 |         ISafe safe,\n   |         ^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":1228,"file":"contracts/TestHook.sol","start":1218},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/TestHook.sol:23:9:\n   |\n23 |         SafeTransaction calldata tx,\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":1265,"file":"contracts/TestHook.sol","start":1238},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/TestHook.sol:26:25:\n   |\n26 |     ) external returns (bytes memory preCheckData) {\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":1384,"file":"contracts/TestHook.sol","start":1359},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/TestHook.sol:41:9:\n   |\n41 |         ISafe safe,\n   |         ^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":2010,"file":"contracts/TestHook.sol","start":2000},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/TestHook.sol:42:9:\n   |\n42 |         SafeRootAccess calldata rootAccess,\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":2054,"file":"contracts/TestHook.sol","start":2020},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/TestHook.sol:45:25:\n   |\n45 |     ) external returns (bytes memory preCheckData) {\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":2173,"file":"contracts/TestHook.sol","start":2148},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/TestHook.sol:56:24:\n   |\n56 |     function postCheck(ISafe safe, bool success, bytes calldata preCheckData) external {\n   |                        ^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":2784,"file":"contracts/TestHook.sol","start":2774},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/TestHook.sol:60:32:\n   |\n60 |     function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n   |                                ^^^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":2961,"file":"contracts/TestHook.sol","start":2943},"type":"Warning"},{"component":"general","errorCode":"2018","formattedMessage":"Warning: Function state mutability can be restricted to pure\n  --> contracts/TestHook.sol:60:5:\n   |\n60 |     function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Function state mutability can be restricted to pure","severity":"warning","sourceLocation":{"end":3020,"file":"contracts/TestHook.sol","start":2916},"type":"Warning"}],"sources":{"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[11]},"id":12,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:0"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"125:279:0","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":11,"linearizedBaseContracts":[11],"name":"IERC165","nameLocation":"415:7:0","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"429:340:0","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":10,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"783:17:0","nodeType":"FunctionDefinition","parameters":{"id":6,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5,"mutability":"mutable","name":"interfaceId","nameLocation":"808:11:0","nodeType":"VariableDeclaration","scope":10,"src":"801:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4,"name":"bytes4","nodeType":"ElementaryTypeName","src":"801:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"800:20:0"},"returnParameters":{"id":9,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":10,"src":"844:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7,"name":"bool","nodeType":"ElementaryTypeName","src":"844:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"843:6:0"},"scope":11,"src":"774:76:0","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":12,"src":"405:447:0","usedErrors":[]}],"src":"100:753:0"},"id":0},"@safe-global/safe-core-protocol/contracts/DataTypes.sol":{"ast":{"absolutePath":"@safe-global/safe-core-protocol/contracts/DataTypes.sol","exportedSymbols":{"SafeProtocolAction":[20],"SafeRootAccess":[37],"SafeTransaction":[29]},"id":38,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":13,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"42:24:1"},{"canonicalName":"SafeProtocolAction","id":20,"members":[{"constant":false,"id":15,"mutability":"mutable","name":"to","nameLocation":"116:2:1","nodeType":"VariableDeclaration","scope":20,"src":"100:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":14,"name":"address","nodeType":"ElementaryTypeName","src":"100:15:1","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":17,"mutability":"mutable","name":"value","nameLocation":"132:5:1","nodeType":"VariableDeclaration","scope":20,"src":"124:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":16,"name":"uint256","nodeType":"ElementaryTypeName","src":"124:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":19,"mutability":"mutable","name":"data","nameLocation":"149:4:1","nodeType":"VariableDeclaration","scope":20,"src":"143:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":18,"name":"bytes","nodeType":"ElementaryTypeName","src":"143:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"SafeProtocolAction","nameLocation":"75:18:1","nodeType":"StructDefinition","scope":38,"src":"68:88:1","visibility":"public"},{"canonicalName":"SafeTransaction","id":29,"members":[{"constant":false,"id":24,"mutability":"mutable","name":"actions","nameLocation":"208:7:1","nodeType":"VariableDeclaration","scope":29,"src":"187:28:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_SafeProtocolAction_$20_storage_$dyn_storage_ptr","typeString":"struct SafeProtocolAction[]"},"typeName":{"baseType":{"id":22,"nodeType":"UserDefinedTypeName","pathNode":{"id":21,"name":"SafeProtocolAction","nameLocations":["187:18:1"],"nodeType":"IdentifierPath","referencedDeclaration":20,"src":"187:18:1"},"referencedDeclaration":20,"src":"187:18:1","typeDescriptions":{"typeIdentifier":"t_struct$_SafeProtocolAction_$20_storage_ptr","typeString":"struct SafeProtocolAction"}},"id":23,"nodeType":"ArrayTypeName","src":"187:20:1","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_SafeProtocolAction_$20_storage_$dyn_storage_ptr","typeString":"struct SafeProtocolAction[]"}},"visibility":"internal"},{"constant":false,"id":26,"mutability":"mutable","name":"nonce","nameLocation":"229:5:1","nodeType":"VariableDeclaration","scope":29,"src":"221:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":25,"name":"uint256","nodeType":"ElementaryTypeName","src":"221:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":28,"mutability":"mutable","name":"metaHash","nameLocation":"248:8:1","nodeType":"VariableDeclaration","scope":29,"src":"240:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":27,"name":"bytes32","nodeType":"ElementaryTypeName","src":"240:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"SafeTransaction","nameLocation":"165:15:1","nodeType":"StructDefinition","scope":38,"src":"158:101:1","visibility":"public"},{"canonicalName":"SafeRootAccess","id":37,"members":[{"constant":false,"id":32,"mutability":"mutable","name":"action","nameLocation":"308:6:1","nodeType":"VariableDeclaration","scope":37,"src":"289:25:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_SafeProtocolAction_$20_storage_ptr","typeString":"struct SafeProtocolAction"},"typeName":{"id":31,"nodeType":"UserDefinedTypeName","pathNode":{"id":30,"name":"SafeProtocolAction","nameLocations":["289:18:1"],"nodeType":"IdentifierPath","referencedDeclaration":20,"src":"289:18:1"},"referencedDeclaration":20,"src":"289:18:1","typeDescriptions":{"typeIdentifier":"t_struct$_SafeProtocolAction_$20_storage_ptr","typeString":"struct SafeProtocolAction"}},"visibility":"internal"},{"constant":false,"id":34,"mutability":"mutable","name":"nonce","nameLocation":"328:5:1","nodeType":"VariableDeclaration","scope":37,"src":"320:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":33,"name":"uint256","nodeType":"ElementaryTypeName","src":"320:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":36,"mutability":"mutable","name":"metaHash","nameLocation":"347:8:1","nodeType":"VariableDeclaration","scope":37,"src":"339:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":35,"name":"bytes32","nodeType":"ElementaryTypeName","src":"339:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"SafeRootAccess","nameLocation":"268:14:1","nodeType":"StructDefinition","scope":38,"src":"261:97:1","visibility":"public"}],"src":"42:317:1"},"id":1},"@safe-global/safe-core-protocol/contracts/interfaces/Accounts.sol":{"ast":{"absolutePath":"@safe-global/safe-core-protocol/contracts/interfaces/Accounts.sol","exportedSymbols":{"ISafe":[69]},"id":70,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":39,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"42:24:2"},{"abstract":false,"baseContracts":[],"canonicalName":"ISafe","contractDependencies":[],"contractKind":"interface","documentation":{"id":40,"nodeType":"StructuredDocumentation","src":"68:90:2","text":" @title ISafe Declares the functions that are called on a Safe by Safe protocol."},"fullyImplemented":false,"id":69,"linearizedBaseContracts":[69],"name":"ISafe","nameLocation":"169:5:2","nodeType":"ContractDefinition","nodes":[{"functionSelector":"468721a7","id":53,"implemented":false,"kind":"function","modifiers":[],"name":"execTransactionFromModule","nameLocation":"190:25:2","nodeType":"FunctionDefinition","parameters":{"id":49,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42,"mutability":"mutable","name":"to","nameLocation":"241:2:2","nodeType":"VariableDeclaration","scope":53,"src":"225:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":41,"name":"address","nodeType":"ElementaryTypeName","src":"225:15:2","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":44,"mutability":"mutable","name":"value","nameLocation":"261:5:2","nodeType":"VariableDeclaration","scope":53,"src":"253:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43,"name":"uint256","nodeType":"ElementaryTypeName","src":"253:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":46,"mutability":"mutable","name":"data","nameLocation":"291:4:2","nodeType":"VariableDeclaration","scope":53,"src":"276:19:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":45,"name":"bytes","nodeType":"ElementaryTypeName","src":"276:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":48,"mutability":"mutable","name":"operation","nameLocation":"311:9:2","nodeType":"VariableDeclaration","scope":53,"src":"305:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":47,"name":"uint8","nodeType":"ElementaryTypeName","src":"305:5:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"215:111:2"},"returnParameters":{"id":52,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51,"mutability":"mutable","name":"success","nameLocation":"350:7:2","nodeType":"VariableDeclaration","scope":53,"src":"345:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":50,"name":"bool","nodeType":"ElementaryTypeName","src":"345:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"344:14:2"},"scope":69,"src":"181:178:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"5229073f","id":68,"implemented":false,"kind":"function","modifiers":[],"name":"execTransactionFromModuleReturnData","nameLocation":"374:35:2","nodeType":"FunctionDefinition","parameters":{"id":62,"nodeType":"ParameterList","parameters":[{"constant":false,"id":55,"mutability":"mutable","name":"to","nameLocation":"427:2:2","nodeType":"VariableDeclaration","scope":68,"src":"419:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":54,"name":"address","nodeType":"ElementaryTypeName","src":"419:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":57,"mutability":"mutable","name":"value","nameLocation":"447:5:2","nodeType":"VariableDeclaration","scope":68,"src":"439:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":56,"name":"uint256","nodeType":"ElementaryTypeName","src":"439:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":59,"mutability":"mutable","name":"data","nameLocation":"475:4:2","nodeType":"VariableDeclaration","scope":68,"src":"462:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":58,"name":"bytes","nodeType":"ElementaryTypeName","src":"462:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":61,"mutability":"mutable","name":"operation","nameLocation":"495:9:2","nodeType":"VariableDeclaration","scope":68,"src":"489:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":60,"name":"uint8","nodeType":"ElementaryTypeName","src":"489:5:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"409:101:2"},"returnParameters":{"id":67,"nodeType":"ParameterList","parameters":[{"constant":false,"id":64,"mutability":"mutable","name":"success","nameLocation":"534:7:2","nodeType":"VariableDeclaration","scope":68,"src":"529:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":63,"name":"bool","nodeType":"ElementaryTypeName","src":"529:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":66,"mutability":"mutable","name":"returnData","nameLocation":"556:10:2","nodeType":"VariableDeclaration","scope":68,"src":"543:23:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":65,"name":"bytes","nodeType":"ElementaryTypeName","src":"543:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"528:39:2"},"scope":69,"src":"365:203:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":70,"src":"159:411:2","usedErrors":[]}],"src":"42:529:2"},"id":2},"@safe-global/safe-core-protocol/contracts/interfaces/Integrations.sol":{"ast":{"absolutePath":"@safe-global/safe-core-protocol/contracts/interfaces/Integrations.sol","exportedSymbols":{"IERC165":[11],"ISafe":[69],"ISafeProtocolFunctionHandler":[95],"ISafeProtocolHooks":[159],"ISafeProtocolPlugin":[187],"ISafeProtocolStaticFunctionHandler":[112],"SafeRootAccess":[37],"SafeTransaction":[29]},"id":188,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":71,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"42:24:3"},{"absolutePath":"@safe-global/safe-core-protocol/contracts/interfaces/Accounts.sol","file":"./Accounts.sol","id":73,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":188,"sourceUnit":70,"src":"67:37:3","symbolAliases":[{"foreign":{"id":72,"name":"ISafe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69,"src":"75:5:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@safe-global/safe-core-protocol/contracts/DataTypes.sol","file":"../DataTypes.sol","id":76,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":188,"sourceUnit":38,"src":"105:65:3","symbolAliases":[{"foreign":{"id":74,"name":"SafeTransaction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"113:15:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":75,"name":"SafeRootAccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"130:14:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"@openzeppelin/contracts/utils/introspection/IERC165.sol","id":78,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":188,"sourceUnit":12,"src":"171:80:3","symbolAliases":[{"foreign":{"id":77,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":11,"src":"179:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ISafeProtocolFunctionHandler","contractDependencies":[],"contractKind":"interface","documentation":{"id":79,"nodeType":"StructuredDocumentation","src":"253:255:3","text":" @title ISafeProtocolStaticFunctionHandler - An interface that a Safe functionhandler should implement\n @notice In Safe protocol, a function handler can be used to add additional functionality to a Safe.\n         TODO: Add more explaination."},"fullyImplemented":false,"id":95,"linearizedBaseContracts":[95],"name":"ISafeProtocolFunctionHandler","nameLocation":"519:28:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":80,"nodeType":"StructuredDocumentation","src":"554:288:3","text":" @notice TODO: Add more explaination\n @param safe A Safe instance\n @param sender Address of the sender\n @param value Amount of ETH\n @param data Arbitrary length bytes\n @return result Arbitrary length bytes containing result of the operation"},"functionSelector":"25d6803f","id":94,"implemented":false,"kind":"function","modifiers":[],"name":"handle","nameLocation":"856:6:3","nodeType":"FunctionDefinition","parameters":{"id":90,"nodeType":"ParameterList","parameters":[{"constant":false,"id":83,"mutability":"mutable","name":"safe","nameLocation":"869:4:3","nodeType":"VariableDeclaration","scope":94,"src":"863:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$69","typeString":"contract ISafe"},"typeName":{"id":82,"nodeType":"UserDefinedTypeName","pathNode":{"id":81,"name":"ISafe","nameLocations":["863:5:3"],"nodeType":"IdentifierPath","referencedDeclaration":69,"src":"863:5:3"},"referencedDeclaration":69,"src":"863:5:3","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$69","typeString":"contract ISafe"}},"visibility":"internal"},{"constant":false,"id":85,"mutability":"mutable","name":"sender","nameLocation":"883:6:3","nodeType":"VariableDeclaration","scope":94,"src":"875:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":84,"name":"address","nodeType":"ElementaryTypeName","src":"875:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":87,"mutability":"mutable","name":"value","nameLocation":"899:5:3","nodeType":"VariableDeclaration","scope":94,"src":"891:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":86,"name":"uint256","nodeType":"ElementaryTypeName","src":"891:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":89,"mutability":"mutable","name":"data","nameLocation":"921:4:3","nodeType":"VariableDeclaration","scope":94,"src":"906:19:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":88,"name":"bytes","nodeType":"ElementaryTypeName","src":"906:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"862:64:3"},"returnParameters":{"id":93,"nodeType":"ParameterList","parameters":[{"constant":false,"id":92,"mutability":"mutable","name":"result","nameLocation":"958:6:3","nodeType":"VariableDeclaration","scope":94,"src":"945:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":91,"name":"bytes","nodeType":"ElementaryTypeName","src":"945:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"944:21:3"},"scope":95,"src":"847:119:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":188,"src":"509:459:3","usedErrors":[]},{"abstract":false,"baseContracts":[],"canonicalName":"ISafeProtocolStaticFunctionHandler","contractDependencies":[],"contractKind":"interface","documentation":{"id":96,"nodeType":"StructuredDocumentation","src":"970:290:3","text":" @title ISafeProtocolStaticFunctionHandler - An interface that a Safe functionhandler should implement in case when handling static calls\n @notice In Safe protocol, a function handler can be used to add additional functionality to a Safe.\n         TODO: Add more explaination."},"fullyImplemented":false,"id":112,"linearizedBaseContracts":[112],"name":"ISafeProtocolStaticFunctionHandler","nameLocation":"1271:34:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":97,"nodeType":"StructuredDocumentation","src":"1312:288:3","text":" @notice TODO: Add more explaination\n @param safe A Safe instance\n @param sender Address of the sender\n @param value Amount of ETH\n @param data Arbitrary length bytes\n @return result Arbitrary length bytes containing result of the operation"},"functionSelector":"25d6803f","id":111,"implemented":false,"kind":"function","modifiers":[],"name":"handle","nameLocation":"1614:6:3","nodeType":"FunctionDefinition","parameters":{"id":107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":100,"mutability":"mutable","name":"safe","nameLocation":"1627:4:3","nodeType":"VariableDeclaration","scope":111,"src":"1621:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$69","typeString":"contract ISafe"},"typeName":{"id":99,"nodeType":"UserDefinedTypeName","pathNode":{"id":98,"name":"ISafe","nameLocations":["1621:5:3"],"nodeType":"IdentifierPath","referencedDeclaration":69,"src":"1621:5:3"},"referencedDeclaration":69,"src":"1621:5:3","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$69","typeString":"contract ISafe"}},"visibility":"internal"},{"constant":false,"id":102,"mutability":"mutable","name":"sender","nameLocation":"1641:6:3","nodeType":"VariableDeclaration","scope":111,"src":"1633:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":101,"name":"address","nodeType":"ElementaryTypeName","src":"1633:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":104,"mutability":"mutable","name":"value","nameLocation":"1657:5:3","nodeType":"VariableDeclaration","scope":111,"src":"1649:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":103,"name":"uint256","nodeType":"ElementaryTypeName","src":"1649:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":106,"mutability":"mutable","name":"data","nameLocation":"1679:4:3","nodeType":"VariableDeclaration","scope":111,"src":"1664:19:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":105,"name":"bytes","nodeType":"ElementaryTypeName","src":"1664:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1620:64:3"},"returnParameters":{"id":110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":109,"mutability":"mutable","name":"result","nameLocation":"1721:6:3","nodeType":"VariableDeclaration","scope":111,"src":"1708:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":108,"name":"bytes","nodeType":"ElementaryTypeName","src":"1708:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1707:21:3"},"scope":112,"src":"1605:124:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":188,"src":"1261:470:3","usedErrors":[]},{"abstract":false,"baseContracts":[{"baseName":{"id":114,"name":"IERC165","nameLocations":["1976:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":11,"src":"1976:7:3"},"id":115,"nodeType":"InheritanceSpecifier","src":"1976:7:3"}],"canonicalName":"ISafeProtocolHooks","contractDependencies":[],"contractKind":"interface","documentation":{"id":113,"nodeType":"StructuredDocumentation","src":"1733:210:3","text":" @title ISafeProtocolHooks - An interface that a contract should implement to be enabled as hooks.\n @notice In Safe protocol, hooks can approve or deny transactions based on the logic it implements."},"fullyImplemented":false,"id":159,"linearizedBaseContracts":[159,11],"name":"ISafeProtocolHooks","nameLocation":"1954:18:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":116,"nodeType":"StructuredDocumentation","src":"1990:506:3","text":" @notice A function that will be called by a Safe before the execution of a transaction if the hooks are enabled\n @dev Add custom logic in this function to validate the pre-state and contents of transaction for non-root access.\n @param safe A Safe instance\n @param tx A struct of type SafeTransaction that contains the details of the transaction.\n @param executionType uint256\n @param executionMeta Arbitrary length of bytes\n @return preCheckData bytes"},"functionSelector":"176ae7b7","id":131,"implemented":false,"kind":"function","modifiers":[],"name":"preCheck","nameLocation":"2510:8:3","nodeType":"FunctionDefinition","parameters":{"id":127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":119,"mutability":"mutable","name":"safe","nameLocation":"2534:4:3","nodeType":"VariableDeclaration","scope":131,"src":"2528:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$69","typeString":"contract ISafe"},"typeName":{"id":118,"nodeType":"UserDefinedTypeName","pathNode":{"id":117,"name":"ISafe","nameLocations":["2528:5:3"],"nodeType":"IdentifierPath","referencedDeclaration":69,"src":"2528:5:3"},"referencedDeclaration":69,"src":"2528:5:3","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$69","typeString":"contract ISafe"}},"visibility":"internal"},{"constant":false,"id":122,"mutability":"mutable","name":"tx","nameLocation":"2573:2:3","nodeType":"VariableDeclaration","scope":131,"src":"2548:27:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_SafeTransaction_$29_calldata_ptr","typeString":"struct SafeTransaction"},"typeName":{"id":121,"nodeType":"UserDefinedTypeName","pathNode":{"id":120,"name":"SafeTransaction","nameLocations":["2548:15:3"],"nodeType":"IdentifierPath","referencedDeclaration":29,"src":"2548:15:3"},"referencedDeclaration":29,"src":"2548:15:3","typeDescriptions":{"typeIdentifier":"t_struct$_SafeTransaction_$29_storage_ptr","typeString":"struct SafeTransaction"}},"visibility":"internal"},{"constant":false,"id":124,"mutability":"mutable","name":"executionType","nameLocation":"2593:13:3","nodeType":"VariableDeclaration","scope":131,"src":"2585:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":123,"name":"uint256","nodeType":"ElementaryTypeName","src":"2585:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":126,"mutability":"mutable","name":"executionMeta","nameLocation":"2631:13:3","nodeType":"VariableDeclaration","scope":131,"src":"2616:28:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":125,"name":"bytes","nodeType":"ElementaryTypeName","src":"2616:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2518:132:3"},"returnParameters":{"id":130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":129,"mutability":"mutable","name":"preCheckData","nameLocation":"2682:12:3","nodeType":"VariableDeclaration","scope":131,"src":"2669:25:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":128,"name":"bytes","nodeType":"ElementaryTypeName","src":"2669:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2668:27:3"},"scope":159,"src":"2501:195:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":132,"nodeType":"StructuredDocumentation","src":"2702:488:3","text":" @notice A function that will be called by a safe before the execution of a transaction if the hooks are enabled and\n         transaction requies tool access.\n @dev Add custom logic in this function to validate the pre-state and contents of transaction for root access.\n @param safe A Safe instance\n @param rootAccess DataTypes.SafeRootAccess\n @param executionType uint256\n @param executionMeta bytes\n @return preCheckData bytes"},"functionSelector":"7359b742","id":147,"implemented":false,"kind":"function","modifiers":[],"name":"preCheckRootAccess","nameLocation":"3204:18:3","nodeType":"FunctionDefinition","parameters":{"id":143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":135,"mutability":"mutable","name":"safe","nameLocation":"3238:4:3","nodeType":"VariableDeclaration","scope":147,"src":"3232:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$69","typeString":"contract ISafe"},"typeName":{"id":134,"nodeType":"UserDefinedTypeName","pathNode":{"id":133,"name":"ISafe","nameLocations":["3232:5:3"],"nodeType":"IdentifierPath","referencedDeclaration":69,"src":"3232:5:3"},"referencedDeclaration":69,"src":"3232:5:3","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$69","typeString":"contract ISafe"}},"visibility":"internal"},{"constant":false,"id":138,"mutability":"mutable","name":"rootAccess","nameLocation":"3276:10:3","nodeType":"VariableDeclaration","scope":147,"src":"3252:34:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_SafeRootAccess_$37_calldata_ptr","typeString":"struct SafeRootAccess"},"typeName":{"id":137,"nodeType":"UserDefinedTypeName","pathNode":{"id":136,"name":"SafeRootAccess","nameLocations":["3252:14:3"],"nodeType":"IdentifierPath","referencedDeclaration":37,"src":"3252:14:3"},"referencedDeclaration":37,"src":"3252:14:3","typeDescriptions":{"typeIdentifier":"t_struct$_SafeRootAccess_$37_storage_ptr","typeString":"struct SafeRootAccess"}},"visibility":"internal"},{"constant":false,"id":140,"mutability":"mutable","name":"executionType","nameLocation":"3304:13:3","nodeType":"VariableDeclaration","scope":147,"src":"3296:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":139,"name":"uint256","nodeType":"ElementaryTypeName","src":"3296:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":142,"mutability":"mutable","name":"executionMeta","nameLocation":"3342:13:3","nodeType":"VariableDeclaration","scope":147,"src":"3327:28:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":141,"name":"bytes","nodeType":"ElementaryTypeName","src":"3327:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3222:139:3"},"returnParameters":{"id":146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":145,"mutability":"mutable","name":"preCheckData","nameLocation":"3393:12:3","nodeType":"VariableDeclaration","scope":147,"src":"3380:25:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":144,"name":"bytes","nodeType":"ElementaryTypeName","src":"3380:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3379:27:3"},"scope":159,"src":"3195:212:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":148,"nodeType":"StructuredDocumentation","src":"3413:481:3","text":" @notice A function that will be called by a safe after the execution of a transaction if the hooks are enabled. Hooks should revert if the post state of after the transaction is not as expected.\n @dev Add custom logic in this function to validate the post-state after the transaction is executed.\n @param safe ISafe\n @param success bool\n @param preCheckData Arbitrary length bytes that was returned by during pre-check of the transaction."},"functionSelector":"f44d4ca3","id":158,"implemented":false,"kind":"function","modifiers":[],"name":"postCheck","nameLocation":"3908:9:3","nodeType":"FunctionDefinition","parameters":{"id":156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":151,"mutability":"mutable","name":"safe","nameLocation":"3924:4:3","nodeType":"VariableDeclaration","scope":158,"src":"3918:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$69","typeString":"contract ISafe"},"typeName":{"id":150,"nodeType":"UserDefinedTypeName","pathNode":{"id":149,"name":"ISafe","nameLocations":["3918:5:3"],"nodeType":"IdentifierPath","referencedDeclaration":69,"src":"3918:5:3"},"referencedDeclaration":69,"src":"3918:5:3","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$69","typeString":"contract ISafe"}},"visibility":"internal"},{"constant":false,"id":153,"mutability":"mutable","name":"success","nameLocation":"3935:7:3","nodeType":"VariableDeclaration","scope":158,"src":"3930:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":152,"name":"bool","nodeType":"ElementaryTypeName","src":"3930:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":155,"mutability":"mutable","name":"preCheckData","nameLocation":"3959:12:3","nodeType":"VariableDeclaration","scope":158,"src":"3944:27:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":154,"name":"bytes","nodeType":"ElementaryTypeName","src":"3944:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3917:55:3"},"returnParameters":{"id":157,"nodeType":"ParameterList","parameters":[],"src":"3981:0:3"},"scope":159,"src":"3899:83:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":188,"src":"1944:2040:3","usedErrors":[]},{"abstract":false,"baseContracts":[],"canonicalName":"ISafeProtocolPlugin","contractDependencies":[],"contractKind":"interface","documentation":{"id":160,"nodeType":"StructuredDocumentation","src":"3986:88:3","text":" @title ISafeProtocolPlugin - An interface that a Safe plugin should implement"},"fullyImplemented":false,"id":187,"linearizedBaseContracts":[187],"name":"ISafeProtocolPlugin","nameLocation":"4085:19:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":161,"nodeType":"StructuredDocumentation","src":"4111:114:3","text":" @notice A funtion that returns name of the plugin\n @return name string name of the plugin"},"functionSelector":"06fdde03","id":166,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"4239:4:3","nodeType":"FunctionDefinition","parameters":{"id":162,"nodeType":"ParameterList","parameters":[],"src":"4243:2:3"},"returnParameters":{"id":165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":164,"mutability":"mutable","name":"name","nameLocation":"4283:4:3","nodeType":"VariableDeclaration","scope":166,"src":"4269:18:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":163,"name":"string","nodeType":"ElementaryTypeName","src":"4269:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4268:20:3"},"scope":187,"src":"4230:59:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":167,"nodeType":"StructuredDocumentation","src":"4295:123:3","text":" @notice A funtion that returns version of the plugin\n @return version string version of the plugin"},"functionSelector":"54fd4d50","id":172,"implemented":false,"kind":"function","modifiers":[],"name":"version","nameLocation":"4432:7:3","nodeType":"FunctionDefinition","parameters":{"id":168,"nodeType":"ParameterList","parameters":[],"src":"4439:2:3"},"returnParameters":{"id":171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":170,"mutability":"mutable","name":"version","nameLocation":"4479:7:3","nodeType":"VariableDeclaration","scope":172,"src":"4465:21:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":169,"name":"string","nodeType":"ElementaryTypeName","src":"4465:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4464:23:3"},"scope":187,"src":"4423:65:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":173,"nodeType":"StructuredDocumentation","src":"4494:265:3","text":" @notice A funtion that returns version of the plugin.\n         TODO: Define types of meta provider and possible values of location in each of the cases.\n @return providerType uint256 Type of meta provider\n @return location bytes"},"functionSelector":"e4b204b6","id":180,"implemented":false,"kind":"function","modifiers":[],"name":"metaProvider","nameLocation":"4773:12:3","nodeType":"FunctionDefinition","parameters":{"id":174,"nodeType":"ParameterList","parameters":[],"src":"4785:2:3"},"returnParameters":{"id":179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":176,"mutability":"mutable","name":"providerType","nameLocation":"4819:12:3","nodeType":"VariableDeclaration","scope":180,"src":"4811:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":175,"name":"uint256","nodeType":"ElementaryTypeName","src":"4811:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":178,"mutability":"mutable","name":"location","nameLocation":"4846:8:3","nodeType":"VariableDeclaration","scope":180,"src":"4833:21:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":177,"name":"bytes","nodeType":"ElementaryTypeName","src":"4833:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4810:45:3"},"scope":187,"src":"4764:92:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":181,"nodeType":"StructuredDocumentation","src":"4862:182:3","text":" @notice A function that indicates if the plugin requires root access to a Safe.\n @return requiresRootAccess True if root access is required, false otherwise."},"functionSelector":"be193d27","id":186,"implemented":false,"kind":"function","modifiers":[],"name":"requiresRootAccess","nameLocation":"5058:18:3","nodeType":"FunctionDefinition","parameters":{"id":182,"nodeType":"ParameterList","parameters":[],"src":"5076:2:3"},"returnParameters":{"id":185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":184,"mutability":"mutable","name":"requiresRootAccess","nameLocation":"5107:18:3","nodeType":"VariableDeclaration","scope":186,"src":"5102:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":183,"name":"bool","nodeType":"ElementaryTypeName","src":"5102:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5101:25:3"},"scope":187,"src":"5049:78:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":188,"src":"4075:1054:3","usedErrors":[]}],"src":"42:5088:3"},"id":3},"contracts/TestHook.sol":{"ast":{"absolutePath":"contracts/TestHook.sol","exportedSymbols":{"ISafe":[69],"ISafeProtocolHooks":[159],"SafeRootAccess":[37],"SafeTransaction":[29],"TestHook":[300]},"id":301,"nodeType":"SourceUnit","nodes":[{"absolutePath":"@safe-global/safe-core-protocol/contracts/interfaces/Integrations.sol","file":"@safe-global/safe-core-protocol/contracts/interfaces/Integrations.sol","id":190,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":301,"sourceUnit":188,"src":"0:105:4","symbolAliases":[{"foreign":{"id":189,"name":"ISafeProtocolHooks","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":159,"src":"8:18:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@safe-global/safe-core-protocol/contracts/interfaces/Accounts.sol","file":"@safe-global/safe-core-protocol/contracts/interfaces/Accounts.sol","id":192,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":301,"sourceUnit":70,"src":"106:88:4","symbolAliases":[{"foreign":{"id":191,"name":"ISafe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69,"src":"114:5:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@safe-global/safe-core-protocol/contracts/DataTypes.sol","file":"@safe-global/safe-core-protocol/contracts/DataTypes.sol","id":194,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":301,"sourceUnit":38,"src":"195:88:4","symbolAliases":[{"foreign":{"id":193,"name":"SafeTransaction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"203:15:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@safe-global/safe-core-protocol/contracts/DataTypes.sol","file":"@safe-global/safe-core-protocol/contracts/DataTypes.sol","id":196,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":301,"sourceUnit":38,"src":"284:87:4","symbolAliases":[{"foreign":{"id":195,"name":"SafeRootAccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"292:14:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":197,"name":"ISafeProtocolHooks","nameLocations":["394:18:4"],"nodeType":"IdentifierPath","referencedDeclaration":159,"src":"394:18:4"},"id":198,"nodeType":"InheritanceSpecifier","src":"394:18:4"}],"canonicalName":"TestHook","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":300,"linearizedBaseContracts":[300,159,11],"name":"TestHook","nameLocation":"382:8:4","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"ba141d1e6792303b9e9126885cd31f5e91dc6b15836c7214f821b163a069cbf4","id":206,"name":"PreCheckCalled","nameLocation":"426:14:4","nodeType":"EventDefinition","parameters":{"id":205,"nodeType":"ParameterList","parameters":[{"constant":false,"id":200,"indexed":false,"mutability":"mutable","name":"sender","nameLocation":"449:6:4","nodeType":"VariableDeclaration","scope":206,"src":"441:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":199,"name":"address","nodeType":"ElementaryTypeName","src":"441:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":202,"indexed":false,"mutability":"mutable","name":"executionType","nameLocation":"465:13:4","nodeType":"VariableDeclaration","scope":206,"src":"457:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":201,"name":"uint256","nodeType":"ElementaryTypeName","src":"457:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":204,"indexed":false,"mutability":"mutable","name":"executionMeta","nameLocation":"486:13:4","nodeType":"VariableDeclaration","scope":206,"src":"480:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":203,"name":"bytes","nodeType":"ElementaryTypeName","src":"480:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"440:60:4"},"src":"420:81:4"},{"anonymous":false,"eventSelector":"56fe939208d9884dede3b0a4f4168be3c4f445b3280bda9682397aaac12e06b2","id":214,"name":"PostCheckCalled","nameLocation":"512:15:4","nodeType":"EventDefinition","parameters":{"id":213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":208,"indexed":false,"mutability":"mutable","name":"sender","nameLocation":"536:6:4","nodeType":"VariableDeclaration","scope":214,"src":"528:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":207,"name":"address","nodeType":"ElementaryTypeName","src":"528:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":210,"indexed":false,"mutability":"mutable","name":"success","nameLocation":"549:7:4","nodeType":"VariableDeclaration","scope":214,"src":"544:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":209,"name":"bool","nodeType":"ElementaryTypeName","src":"544:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":212,"indexed":false,"mutability":"mutable","name":"preCheckData","nameLocation":"564:12:4","nodeType":"VariableDeclaration","scope":214,"src":"558:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":211,"name":"bytes","nodeType":"ElementaryTypeName","src":"558:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"527:50:4"},"src":"506:72:4"},{"anonymous":false,"eventSelector":"3256a4f1a2ba63603d140a241b17453003a8c7458eb8264328d35f440d5d392a","id":222,"name":"PreCheckRootAccessCalled","nameLocation":"589:24:4","nodeType":"EventDefinition","parameters":{"id":221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":216,"indexed":false,"mutability":"mutable","name":"sender","nameLocation":"622:6:4","nodeType":"VariableDeclaration","scope":222,"src":"614:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":215,"name":"address","nodeType":"ElementaryTypeName","src":"614:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":218,"indexed":false,"mutability":"mutable","name":"executionType","nameLocation":"638:13:4","nodeType":"VariableDeclaration","scope":222,"src":"630:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":217,"name":"uint256","nodeType":"ElementaryTypeName","src":"630:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":220,"indexed":false,"mutability":"mutable","name":"executionMeta","nameLocation":"659:13:4","nodeType":"VariableDeclaration","scope":222,"src":"653:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":219,"name":"bytes","nodeType":"ElementaryTypeName","src":"653:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"613:60:4"},"src":"583:91:4"},{"baseFunctions":[131],"body":{"id":245,"nodeType":"Block","src":"1386:78:4","statements":[{"eventCall":{"arguments":[{"expression":{"id":239,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1416:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1420:6:4","memberName":"sender","nodeType":"MemberAccess","src":"1416:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":241,"name":"executionType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"1428:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":242,"name":"executionMeta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"1443:13:4","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":238,"name":"PreCheckCalled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"1401:14:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1401:56:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":244,"nodeType":"EmitStatement","src":"1396:61:4"}]},"documentation":{"id":223,"nodeType":"StructuredDocumentation","src":"680:506:4","text":" @notice A function that will be called by a Safe before the execution of a transaction if the hooks are enabled\n @dev Add custom logic in this function to validate the pre-state and contents of transaction for non-root access.\n @param safe A Safe instance\n @param tx A struct of type SafeTransaction that contains the details of the transaction.\n @param executionType uint256\n @param executionMeta Arbitrary length of bytes\n @return preCheckData bytes"},"functionSelector":"176ae7b7","id":246,"implemented":true,"kind":"function","modifiers":[],"name":"preCheck","nameLocation":"1200:8:4","nodeType":"FunctionDefinition","parameters":{"id":234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":226,"mutability":"mutable","name":"safe","nameLocation":"1224:4:4","nodeType":"VariableDeclaration","scope":246,"src":"1218:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$69","typeString":"contract ISafe"},"typeName":{"id":225,"nodeType":"UserDefinedTypeName","pathNode":{"id":224,"name":"ISafe","nameLocations":["1218:5:4"],"nodeType":"IdentifierPath","referencedDeclaration":69,"src":"1218:5:4"},"referencedDeclaration":69,"src":"1218:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$69","typeString":"contract ISafe"}},"visibility":"internal"},{"constant":false,"id":229,"mutability":"mutable","name":"tx","nameLocation":"1263:2:4","nodeType":"VariableDeclaration","scope":246,"src":"1238:27:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_SafeTransaction_$29_calldata_ptr","typeString":"struct SafeTransaction"},"typeName":{"id":228,"nodeType":"UserDefinedTypeName","pathNode":{"id":227,"name":"SafeTransaction","nameLocations":["1238:15:4"],"nodeType":"IdentifierPath","referencedDeclaration":29,"src":"1238:15:4"},"referencedDeclaration":29,"src":"1238:15:4","typeDescriptions":{"typeIdentifier":"t_struct$_SafeTransaction_$29_storage_ptr","typeString":"struct SafeTransaction"}},"visibility":"internal"},{"constant":false,"id":231,"mutability":"mutable","name":"executionType","nameLocation":"1283:13:4","nodeType":"VariableDeclaration","scope":246,"src":"1275:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":230,"name":"uint256","nodeType":"ElementaryTypeName","src":"1275:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":233,"mutability":"mutable","name":"executionMeta","nameLocation":"1321:13:4","nodeType":"VariableDeclaration","scope":246,"src":"1306:28:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":232,"name":"bytes","nodeType":"ElementaryTypeName","src":"1306:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1208:132:4"},"returnParameters":{"id":237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":236,"mutability":"mutable","name":"preCheckData","nameLocation":"1372:12:4","nodeType":"VariableDeclaration","scope":246,"src":"1359:25:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":235,"name":"bytes","nodeType":"ElementaryTypeName","src":"1359:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1358:27:4"},"scope":300,"src":"1191:273:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[147],"body":{"id":269,"nodeType":"Block","src":"2175:88:4","statements":[{"eventCall":{"arguments":[{"expression":{"id":263,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2215:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2219:6:4","memberName":"sender","nodeType":"MemberAccess","src":"2215:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":265,"name":"executionType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":255,"src":"2227:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":266,"name":"executionMeta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":257,"src":"2242:13:4","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":262,"name":"PreCheckRootAccessCalled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":222,"src":"2190:24:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2190:66:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":268,"nodeType":"EmitStatement","src":"2185:71:4"}]},"documentation":{"id":247,"nodeType":"StructuredDocumentation","src":"1470:488:4","text":" @notice A function that will be called by a safe before the execution of a transaction if the hooks are enabled and\n         transaction requies tool access.\n @dev Add custom logic in this function to validate the pre-state and contents of transaction for root access.\n @param safe A Safe instance\n @param rootAccess DataTypes.SafeRootAccess\n @param executionType uint256\n @param executionMeta bytes\n @return preCheckData bytes"},"functionSelector":"7359b742","id":270,"implemented":true,"kind":"function","modifiers":[],"name":"preCheckRootAccess","nameLocation":"1972:18:4","nodeType":"FunctionDefinition","parameters":{"id":258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":250,"mutability":"mutable","name":"safe","nameLocation":"2006:4:4","nodeType":"VariableDeclaration","scope":270,"src":"2000:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$69","typeString":"contract ISafe"},"typeName":{"id":249,"nodeType":"UserDefinedTypeName","pathNode":{"id":248,"name":"ISafe","nameLocations":["2000:5:4"],"nodeType":"IdentifierPath","referencedDeclaration":69,"src":"2000:5:4"},"referencedDeclaration":69,"src":"2000:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$69","typeString":"contract ISafe"}},"visibility":"internal"},{"constant":false,"id":253,"mutability":"mutable","name":"rootAccess","nameLocation":"2044:10:4","nodeType":"VariableDeclaration","scope":270,"src":"2020:34:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_SafeRootAccess_$37_calldata_ptr","typeString":"struct SafeRootAccess"},"typeName":{"id":252,"nodeType":"UserDefinedTypeName","pathNode":{"id":251,"name":"SafeRootAccess","nameLocations":["2020:14:4"],"nodeType":"IdentifierPath","referencedDeclaration":37,"src":"2020:14:4"},"referencedDeclaration":37,"src":"2020:14:4","typeDescriptions":{"typeIdentifier":"t_struct$_SafeRootAccess_$37_storage_ptr","typeString":"struct SafeRootAccess"}},"visibility":"internal"},{"constant":false,"id":255,"mutability":"mutable","name":"executionType","nameLocation":"2072:13:4","nodeType":"VariableDeclaration","scope":270,"src":"2064:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":254,"name":"uint256","nodeType":"ElementaryTypeName","src":"2064:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":257,"mutability":"mutable","name":"executionMeta","nameLocation":"2110:13:4","nodeType":"VariableDeclaration","scope":270,"src":"2095:28:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":256,"name":"bytes","nodeType":"ElementaryTypeName","src":"2095:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1990:139:4"},"returnParameters":{"id":261,"nodeType":"ParameterList","parameters":[{"constant":false,"id":260,"mutability":"mutable","name":"preCheckData","nameLocation":"2161:12:4","nodeType":"VariableDeclaration","scope":270,"src":"2148:25:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":259,"name":"bytes","nodeType":"ElementaryTypeName","src":"2148:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2147:27:4"},"scope":300,"src":"1963:300:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[158],"body":{"id":288,"nodeType":"Block","src":"2838:72:4","statements":[{"eventCall":{"arguments":[{"expression":{"id":282,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2869:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2873:6:4","memberName":"sender","nodeType":"MemberAccess","src":"2869:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":284,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":276,"src":"2881:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":285,"name":"preCheckData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":278,"src":"2890:12:4","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":281,"name":"PostCheckCalled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"2853:15:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bool,bytes memory)"}},"id":286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2853:50:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":287,"nodeType":"EmitStatement","src":"2848:55:4"}]},"documentation":{"id":271,"nodeType":"StructuredDocumentation","src":"2269:481:4","text":" @notice A function that will be called by a safe after the execution of a transaction if the hooks are enabled. Hooks should revert if the post state of after the transaction is not as expected.\n @dev Add custom logic in this function to validate the post-state after the transaction is executed.\n @param safe ISafe\n @param success bool\n @param preCheckData Arbitrary length bytes that was returned by during pre-check of the transaction."},"functionSelector":"f44d4ca3","id":289,"implemented":true,"kind":"function","modifiers":[],"name":"postCheck","nameLocation":"2764:9:4","nodeType":"FunctionDefinition","parameters":{"id":279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":274,"mutability":"mutable","name":"safe","nameLocation":"2780:4:4","nodeType":"VariableDeclaration","scope":289,"src":"2774:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$69","typeString":"contract ISafe"},"typeName":{"id":273,"nodeType":"UserDefinedTypeName","pathNode":{"id":272,"name":"ISafe","nameLocations":["2774:5:4"],"nodeType":"IdentifierPath","referencedDeclaration":69,"src":"2774:5:4"},"referencedDeclaration":69,"src":"2774:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$69","typeString":"contract ISafe"}},"visibility":"internal"},{"constant":false,"id":276,"mutability":"mutable","name":"success","nameLocation":"2791:7:4","nodeType":"VariableDeclaration","scope":289,"src":"2786:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":275,"name":"bool","nodeType":"ElementaryTypeName","src":"2786:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":278,"mutability":"mutable","name":"preCheckData","nameLocation":"2815:12:4","nodeType":"VariableDeclaration","scope":289,"src":"2800:27:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":277,"name":"bytes","nodeType":"ElementaryTypeName","src":"2800:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2773:55:4"},"returnParameters":{"id":280,"nodeType":"ParameterList","parameters":[],"src":"2838:0:4"},"scope":300,"src":"2755:155:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[10],"body":{"id":298,"nodeType":"Block","src":"2992:28:4","statements":[{"expression":{"hexValue":"74727565","id":296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3009:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":295,"id":297,"nodeType":"Return","src":"3002:11:4"}]},"functionSelector":"01ffc9a7","id":299,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"2925:17:4","nodeType":"FunctionDefinition","parameters":{"id":292,"nodeType":"ParameterList","parameters":[{"constant":false,"id":291,"mutability":"mutable","name":"interfaceId","nameLocation":"2950:11:4","nodeType":"VariableDeclaration","scope":299,"src":"2943:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":290,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2943:6:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2942:20:4"},"returnParameters":{"id":295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":294,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":299,"src":"2986:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":293,"name":"bool","nodeType":"ElementaryTypeName","src":"2986:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2985:6:4"},"scope":300,"src":"2916:104:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":301,"src":"373:2649:4","usedErrors":[]}],"src":"0:3022:4"},"id":4}},"contracts":{"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@safe-global/safe-core-protocol/contracts/interfaces/Accounts.sol":{"ISafe":{"abi":[{"inputs":[{"internalType":"address payable","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint8","name":"operation","type":"uint8"}],"name":"execTransactionFromModule","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint8","name":"operation","type":"uint8"}],"name":"execTransactionFromModuleReturnData","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"title":"ISafe Declares the functions that are called on a Safe by Safe protocol.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"execTransactionFromModule(address,uint256,bytes,uint8)":"468721a7","execTransactionFromModuleReturnData(address,uint256,bytes,uint8)":"5229073f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"execTransactionFromModule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"execTransactionFromModuleReturnData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"ISafe Declares the functions that are called on a Safe by Safe protocol.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@safe-global/safe-core-protocol/contracts/interfaces/Accounts.sol\":\"ISafe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@safe-global/safe-core-protocol/contracts/interfaces/Accounts.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.18;\\n\\n/**\\n * @title ISafe Declares the functions that are called on a Safe by Safe protocol.\\n */\\ninterface ISafe {\\n    function execTransactionFromModule(\\n        address payable to,\\n        uint256 value,\\n        bytes calldata data,\\n        uint8 operation\\n    ) external returns (bool success);\\n\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        uint8 operation\\n    ) external returns (bool success, bytes memory returnData);\\n}\\n\",\"keccak256\":\"0x46ab51acf3f12d9dd20d2a0324553e24897e49385dd4a49c7e0cb06cff2611c0\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@safe-global/safe-core-protocol/contracts/interfaces/Integrations.sol":{"ISafeProtocolFunctionHandler":{"abi":[{"inputs":[{"internalType":"contract ISafe","name":"safe","type":"address"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"handle","outputs":[{"internalType":"bytes","name":"result","type":"bytes"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"handle(address,address,uint256,bytes)":{"params":{"data":"Arbitrary length bytes","safe":"A Safe instance","sender":"Address of the sender","value":"Amount of ETH"},"returns":{"result":"Arbitrary length bytes containing result of the operation"}}},"title":"ISafeProtocolStaticFunctionHandler - An interface that a Safe functionhandler should implement","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"handle(address,address,uint256,bytes)":"25d6803f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISafe\",\"name\":\"safe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"handle\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"handle(address,address,uint256,bytes)\":{\"params\":{\"data\":\"Arbitrary length bytes\",\"safe\":\"A Safe instance\",\"sender\":\"Address of the sender\",\"value\":\"Amount of ETH\"},\"returns\":{\"result\":\"Arbitrary length bytes containing result of the operation\"}}},\"title\":\"ISafeProtocolStaticFunctionHandler - An interface that a Safe functionhandler should implement\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"handle(address,address,uint256,bytes)\":{\"notice\":\"TODO: Add more explaination\"}},\"notice\":\"In Safe protocol, a function handler can be used to add additional functionality to a Safe.         TODO: Add more explaination.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@safe-global/safe-core-protocol/contracts/interfaces/Integrations.sol\":\"ISafeProtocolFunctionHandler\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@safe-global/safe-core-protocol/contracts/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.18;\\n\\nstruct SafeProtocolAction {\\n    address payable to;\\n    uint256 value;\\n    bytes data;\\n}\\n\\nstruct SafeTransaction {\\n    SafeProtocolAction[] actions;\\n    uint256 nonce;\\n    bytes32 metaHash;\\n}\\n\\nstruct SafeRootAccess {\\n    SafeProtocolAction action;\\n    uint256 nonce;\\n    bytes32 metaHash;\\n}\\n\",\"keccak256\":\"0xd06d030a904b0d962f3ecd294a6c290c2d336d5df44b6f7a88b35bc9e7b10a0e\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-core-protocol/contracts/interfaces/Accounts.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.18;\\n\\n/**\\n * @title ISafe Declares the functions that are called on a Safe by Safe protocol.\\n */\\ninterface ISafe {\\n    function execTransactionFromModule(\\n        address payable to,\\n        uint256 value,\\n        bytes calldata data,\\n        uint8 operation\\n    ) external returns (bool success);\\n\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        uint8 operation\\n    ) external returns (bool success, bytes memory returnData);\\n}\\n\",\"keccak256\":\"0x46ab51acf3f12d9dd20d2a0324553e24897e49385dd4a49c7e0cb06cff2611c0\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-core-protocol/contracts/interfaces/Integrations.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.18;\\nimport {ISafe} from \\\"./Accounts.sol\\\";\\nimport {SafeTransaction, SafeRootAccess} from \\\"../DataTypes.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title ISafeProtocolStaticFunctionHandler - An interface that a Safe functionhandler should implement\\n * @notice In Safe protocol, a function handler can be used to add additional functionality to a Safe.\\n *         TODO: Add more explaination.\\n */\\ninterface ISafeProtocolFunctionHandler {\\n    /**\\n     * @notice TODO: Add more explaination\\n     * @param safe A Safe instance\\n     * @param sender Address of the sender\\n     * @param value Amount of ETH\\n     * @param data Arbitrary length bytes\\n     * @return result Arbitrary length bytes containing result of the operation\\n     */\\n    function handle(ISafe safe, address sender, uint256 value, bytes calldata data) external returns (bytes memory result);\\n}\\n\\n/**\\n * @title ISafeProtocolStaticFunctionHandler - An interface that a Safe functionhandler should implement in case when handling static calls\\n * @notice In Safe protocol, a function handler can be used to add additional functionality to a Safe.\\n *         TODO: Add more explaination.\\n */\\ninterface ISafeProtocolStaticFunctionHandler {\\n    /**\\n     * @notice TODO: Add more explaination\\n     * @param safe A Safe instance\\n     * @param sender Address of the sender\\n     * @param value Amount of ETH\\n     * @param data Arbitrary length bytes\\n     * @return result Arbitrary length bytes containing result of the operation\\n     */\\n    function handle(ISafe safe, address sender, uint256 value, bytes calldata data) external view returns (bytes memory result);\\n}\\n\\n/**\\n * @title ISafeProtocolHooks - An interface that a contract should implement to be enabled as hooks.\\n * @notice In Safe protocol, hooks can approve or deny transactions based on the logic it implements.\\n */\\ninterface ISafeProtocolHooks is IERC165 {\\n    /**\\n     * @notice A function that will be called by a Safe before the execution of a transaction if the hooks are enabled\\n     * @dev Add custom logic in this function to validate the pre-state and contents of transaction for non-root access.\\n     * @param safe A Safe instance\\n     * @param tx A struct of type SafeTransaction that contains the details of the transaction.\\n     * @param executionType uint256\\n     * @param executionMeta Arbitrary length of bytes\\n     * @return preCheckData bytes\\n     */\\n    function preCheck(\\n        ISafe safe,\\n        SafeTransaction calldata tx,\\n        uint256 executionType,\\n        bytes calldata executionMeta\\n    ) external returns (bytes memory preCheckData);\\n\\n    /**\\n     * @notice A function that will be called by a safe before the execution of a transaction if the hooks are enabled and\\n     *         transaction requies tool access.\\n     * @dev Add custom logic in this function to validate the pre-state and contents of transaction for root access.\\n     * @param safe A Safe instance\\n     * @param rootAccess DataTypes.SafeRootAccess\\n     * @param executionType uint256\\n     * @param executionMeta bytes\\n     * @return preCheckData bytes\\n     */\\n    function preCheckRootAccess(\\n        ISafe safe,\\n        SafeRootAccess calldata rootAccess,\\n        uint256 executionType,\\n        bytes calldata executionMeta\\n    ) external returns (bytes memory preCheckData);\\n\\n    /**\\n     * @notice A function that will be called by a safe after the execution of a transaction if the hooks are enabled. Hooks should revert if the post state of after the transaction is not as expected.\\n     * @dev Add custom logic in this function to validate the post-state after the transaction is executed.\\n     * @param safe ISafe\\n     * @param success bool\\n     * @param preCheckData Arbitrary length bytes that was returned by during pre-check of the transaction.\\n     */\\n    function postCheck(ISafe safe, bool success, bytes calldata preCheckData) external;\\n}\\n\\n/**\\n * @title ISafeProtocolPlugin - An interface that a Safe plugin should implement\\n */\\ninterface ISafeProtocolPlugin {\\n    /**\\n     * @notice A funtion that returns name of the plugin\\n     * @return name string name of the plugin\\n     */\\n    function name() external view returns (string memory name);\\n\\n    /**\\n     * @notice A funtion that returns version of the plugin\\n     * @return version string version of the plugin\\n     */\\n    function version() external view returns (string memory version);\\n\\n    /**\\n     * @notice A funtion that returns version of the plugin.\\n     *         TODO: Define types of meta provider and possible values of location in each of the cases.\\n     * @return providerType uint256 Type of meta provider\\n     * @return location bytes\\n     */\\n    function metaProvider() external view returns (uint256 providerType, bytes memory location);\\n\\n    /**\\n     * @notice A function that indicates if the plugin requires root access to a Safe.\\n     * @return requiresRootAccess True if root access is required, false otherwise.\\n     */\\n    function requiresRootAccess() external view returns (bool requiresRootAccess);\\n}\\n\",\"keccak256\":\"0xc761fbe6d3f2fceb7d7072931acdfa1704f7a78d6d5aed052bd9530d9d6797ee\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"handle(address,address,uint256,bytes)":{"notice":"TODO: Add more explaination"}},"notice":"In Safe protocol, a function handler can be used to add additional functionality to a Safe.         TODO: Add more explaination.","version":1}},"ISafeProtocolHooks":{"abi":[{"inputs":[{"internalType":"contract ISafe","name":"safe","type":"address"},{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"preCheckData","type":"bytes"}],"name":"postCheck","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract ISafe","name":"safe","type":"address"},{"components":[{"components":[{"internalType":"address payable","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct SafeProtocolAction[]","name":"actions","type":"tuple[]"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"metaHash","type":"bytes32"}],"internalType":"struct SafeTransaction","name":"tx","type":"tuple"},{"internalType":"uint256","name":"executionType","type":"uint256"},{"internalType":"bytes","name":"executionMeta","type":"bytes"}],"name":"preCheck","outputs":[{"internalType":"bytes","name":"preCheckData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract ISafe","name":"safe","type":"address"},{"components":[{"components":[{"internalType":"address payable","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct SafeProtocolAction","name":"action","type":"tuple"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"metaHash","type":"bytes32"}],"internalType":"struct SafeRootAccess","name":"rootAccess","type":"tuple"},{"internalType":"uint256","name":"executionType","type":"uint256"},{"internalType":"bytes","name":"executionMeta","type":"bytes"}],"name":"preCheckRootAccess","outputs":[{"internalType":"bytes","name":"preCheckData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"postCheck(address,bool,bytes)":{"details":"Add custom logic in this function to validate the post-state after the transaction is executed.","params":{"preCheckData":"Arbitrary length bytes that was returned by during pre-check of the transaction.","safe":"ISafe","success":"bool"}},"preCheck(address,((address,uint256,bytes)[],uint256,bytes32),uint256,bytes)":{"details":"Add custom logic in this function to validate the pre-state and contents of transaction for non-root access.","params":{"executionMeta":"Arbitrary length of bytes","executionType":"uint256","safe":"A Safe instance","tx":"A struct of type SafeTransaction that contains the details of the transaction."},"returns":{"preCheckData":"bytes"}},"preCheckRootAccess(address,((address,uint256,bytes),uint256,bytes32),uint256,bytes)":{"details":"Add custom logic in this function to validate the pre-state and contents of transaction for root access.","params":{"executionMeta":"bytes","executionType":"uint256","rootAccess":"DataTypes.SafeRootAccess","safe":"A Safe instance"},"returns":{"preCheckData":"bytes"}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"title":"ISafeProtocolHooks - An interface that a contract should implement to be enabled as hooks.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"postCheck(address,bool,bytes)":"f44d4ca3","preCheck(address,((address,uint256,bytes)[],uint256,bytes32),uint256,bytes)":"176ae7b7","preCheckRootAccess(address,((address,uint256,bytes),uint256,bytes32),uint256,bytes)":"7359b742","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISafe\",\"name\":\"safe\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"preCheckData\",\"type\":\"bytes\"}],\"name\":\"postCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISafe\",\"name\":\"safe\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct SafeProtocolAction[]\",\"name\":\"actions\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"metaHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct SafeTransaction\",\"name\":\"tx\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"executionType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"executionMeta\",\"type\":\"bytes\"}],\"name\":\"preCheck\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"preCheckData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISafe\",\"name\":\"safe\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct SafeProtocolAction\",\"name\":\"action\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"metaHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct SafeRootAccess\",\"name\":\"rootAccess\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"executionType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"executionMeta\",\"type\":\"bytes\"}],\"name\":\"preCheckRootAccess\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"preCheckData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"postCheck(address,bool,bytes)\":{\"details\":\"Add custom logic in this function to validate the post-state after the transaction is executed.\",\"params\":{\"preCheckData\":\"Arbitrary length bytes that was returned by during pre-check of the transaction.\",\"safe\":\"ISafe\",\"success\":\"bool\"}},\"preCheck(address,((address,uint256,bytes)[],uint256,bytes32),uint256,bytes)\":{\"details\":\"Add custom logic in this function to validate the pre-state and contents of transaction for non-root access.\",\"params\":{\"executionMeta\":\"Arbitrary length of bytes\",\"executionType\":\"uint256\",\"safe\":\"A Safe instance\",\"tx\":\"A struct of type SafeTransaction that contains the details of the transaction.\"},\"returns\":{\"preCheckData\":\"bytes\"}},\"preCheckRootAccess(address,((address,uint256,bytes),uint256,bytes32),uint256,bytes)\":{\"details\":\"Add custom logic in this function to validate the pre-state and contents of transaction for root access.\",\"params\":{\"executionMeta\":\"bytes\",\"executionType\":\"uint256\",\"rootAccess\":\"DataTypes.SafeRootAccess\",\"safe\":\"A Safe instance\"},\"returns\":{\"preCheckData\":\"bytes\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"title\":\"ISafeProtocolHooks - An interface that a contract should implement to be enabled as hooks.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"postCheck(address,bool,bytes)\":{\"notice\":\"A function that will be called by a safe after the execution of a transaction if the hooks are enabled. Hooks should revert if the post state of after the transaction is not as expected.\"},\"preCheck(address,((address,uint256,bytes)[],uint256,bytes32),uint256,bytes)\":{\"notice\":\"A function that will be called by a Safe before the execution of a transaction if the hooks are enabled\"},\"preCheckRootAccess(address,((address,uint256,bytes),uint256,bytes32),uint256,bytes)\":{\"notice\":\"A function that will be called by a safe before the execution of a transaction if the hooks are enabled and         transaction requies tool access.\"}},\"notice\":\"In Safe protocol, hooks can approve or deny transactions based on the logic it implements.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@safe-global/safe-core-protocol/contracts/interfaces/Integrations.sol\":\"ISafeProtocolHooks\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@safe-global/safe-core-protocol/contracts/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.18;\\n\\nstruct SafeProtocolAction {\\n    address payable to;\\n    uint256 value;\\n    bytes data;\\n}\\n\\nstruct SafeTransaction {\\n    SafeProtocolAction[] actions;\\n    uint256 nonce;\\n    bytes32 metaHash;\\n}\\n\\nstruct SafeRootAccess {\\n    SafeProtocolAction action;\\n    uint256 nonce;\\n    bytes32 metaHash;\\n}\\n\",\"keccak256\":\"0xd06d030a904b0d962f3ecd294a6c290c2d336d5df44b6f7a88b35bc9e7b10a0e\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-core-protocol/contracts/interfaces/Accounts.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.18;\\n\\n/**\\n * @title ISafe Declares the functions that are called on a Safe by Safe protocol.\\n */\\ninterface ISafe {\\n    function execTransactionFromModule(\\n        address payable to,\\n        uint256 value,\\n        bytes calldata data,\\n        uint8 operation\\n    ) external returns (bool success);\\n\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        uint8 operation\\n    ) external returns (bool success, bytes memory returnData);\\n}\\n\",\"keccak256\":\"0x46ab51acf3f12d9dd20d2a0324553e24897e49385dd4a49c7e0cb06cff2611c0\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-core-protocol/contracts/interfaces/Integrations.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.18;\\nimport {ISafe} from \\\"./Accounts.sol\\\";\\nimport {SafeTransaction, SafeRootAccess} from \\\"../DataTypes.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title ISafeProtocolStaticFunctionHandler - An interface that a Safe functionhandler should implement\\n * @notice In Safe protocol, a function handler can be used to add additional functionality to a Safe.\\n *         TODO: Add more explaination.\\n */\\ninterface ISafeProtocolFunctionHandler {\\n    /**\\n     * @notice TODO: Add more explaination\\n     * @param safe A Safe instance\\n     * @param sender Address of the sender\\n     * @param value Amount of ETH\\n     * @param data Arbitrary length bytes\\n     * @return result Arbitrary length bytes containing result of the operation\\n     */\\n    function handle(ISafe safe, address sender, uint256 value, bytes calldata data) external returns (bytes memory result);\\n}\\n\\n/**\\n * @title ISafeProtocolStaticFunctionHandler - An interface that a Safe functionhandler should implement in case when handling static calls\\n * @notice In Safe protocol, a function handler can be used to add additional functionality to a Safe.\\n *         TODO: Add more explaination.\\n */\\ninterface ISafeProtocolStaticFunctionHandler {\\n    /**\\n     * @notice TODO: Add more explaination\\n     * @param safe A Safe instance\\n     * @param sender Address of the sender\\n     * @param value Amount of ETH\\n     * @param data Arbitrary length bytes\\n     * @return result Arbitrary length bytes containing result of the operation\\n     */\\n    function handle(ISafe safe, address sender, uint256 value, bytes calldata data) external view returns (bytes memory result);\\n}\\n\\n/**\\n * @title ISafeProtocolHooks - An interface that a contract should implement to be enabled as hooks.\\n * @notice In Safe protocol, hooks can approve or deny transactions based on the logic it implements.\\n */\\ninterface ISafeProtocolHooks is IERC165 {\\n    /**\\n     * @notice A function that will be called by a Safe before the execution of a transaction if the hooks are enabled\\n     * @dev Add custom logic in this function to validate the pre-state and contents of transaction for non-root access.\\n     * @param safe A Safe instance\\n     * @param tx A struct of type SafeTransaction that contains the details of the transaction.\\n     * @param executionType uint256\\n     * @param executionMeta Arbitrary length of bytes\\n     * @return preCheckData bytes\\n     */\\n    function preCheck(\\n        ISafe safe,\\n        SafeTransaction calldata tx,\\n        uint256 executionType,\\n        bytes calldata executionMeta\\n    ) external returns (bytes memory preCheckData);\\n\\n    /**\\n     * @notice A function that will be called by a safe before the execution of a transaction if the hooks are enabled and\\n     *         transaction requies tool access.\\n     * @dev Add custom logic in this function to validate the pre-state and contents of transaction for root access.\\n     * @param safe A Safe instance\\n     * @param rootAccess DataTypes.SafeRootAccess\\n     * @param executionType uint256\\n     * @param executionMeta bytes\\n     * @return preCheckData bytes\\n     */\\n    function preCheckRootAccess(\\n        ISafe safe,\\n        SafeRootAccess calldata rootAccess,\\n        uint256 executionType,\\n        bytes calldata executionMeta\\n    ) external returns (bytes memory preCheckData);\\n\\n    /**\\n     * @notice A function that will be called by a safe after the execution of a transaction if the hooks are enabled. Hooks should revert if the post state of after the transaction is not as expected.\\n     * @dev Add custom logic in this function to validate the post-state after the transaction is executed.\\n     * @param safe ISafe\\n     * @param success bool\\n     * @param preCheckData Arbitrary length bytes that was returned by during pre-check of the transaction.\\n     */\\n    function postCheck(ISafe safe, bool success, bytes calldata preCheckData) external;\\n}\\n\\n/**\\n * @title ISafeProtocolPlugin - An interface that a Safe plugin should implement\\n */\\ninterface ISafeProtocolPlugin {\\n    /**\\n     * @notice A funtion that returns name of the plugin\\n     * @return name string name of the plugin\\n     */\\n    function name() external view returns (string memory name);\\n\\n    /**\\n     * @notice A funtion that returns version of the plugin\\n     * @return version string version of the plugin\\n     */\\n    function version() external view returns (string memory version);\\n\\n    /**\\n     * @notice A funtion that returns version of the plugin.\\n     *         TODO: Define types of meta provider and possible values of location in each of the cases.\\n     * @return providerType uint256 Type of meta provider\\n     * @return location bytes\\n     */\\n    function metaProvider() external view returns (uint256 providerType, bytes memory location);\\n\\n    /**\\n     * @notice A function that indicates if the plugin requires root access to a Safe.\\n     * @return requiresRootAccess True if root access is required, false otherwise.\\n     */\\n    function requiresRootAccess() external view returns (bool requiresRootAccess);\\n}\\n\",\"keccak256\":\"0xc761fbe6d3f2fceb7d7072931acdfa1704f7a78d6d5aed052bd9530d9d6797ee\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"postCheck(address,bool,bytes)":{"notice":"A function that will be called by a safe after the execution of a transaction if the hooks are enabled. Hooks should revert if the post state of after the transaction is not as expected."},"preCheck(address,((address,uint256,bytes)[],uint256,bytes32),uint256,bytes)":{"notice":"A function that will be called by a Safe before the execution of a transaction if the hooks are enabled"},"preCheckRootAccess(address,((address,uint256,bytes),uint256,bytes32),uint256,bytes)":{"notice":"A function that will be called by a safe before the execution of a transaction if the hooks are enabled and         transaction requies tool access."}},"notice":"In Safe protocol, hooks can approve or deny transactions based on the logic it implements.","version":1}},"ISafeProtocolPlugin":{"abi":[{"inputs":[],"name":"metaProvider","outputs":[{"internalType":"uint256","name":"providerType","type":"uint256"},{"internalType":"bytes","name":"location","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"name","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"requiresRootAccess","outputs":[{"internalType":"bool","name":"requiresRootAccess","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"version","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"metaProvider()":{"returns":{"location":"bytes","providerType":"uint256 Type of meta provider"}},"name()":{"returns":{"name":"string name of the plugin"}},"requiresRootAccess()":{"returns":{"requiresRootAccess":"True if root access is required, false otherwise."}},"version()":{"returns":{"version":"string version of the plugin"}}},"title":"ISafeProtocolPlugin - An interface that a Safe plugin should implement","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"metaProvider()":"e4b204b6","name()":"06fdde03","requiresRootAccess()":"be193d27","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"metaProvider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"providerType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"location\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiresRootAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"requiresRootAccess\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"metaProvider()\":{\"returns\":{\"location\":\"bytes\",\"providerType\":\"uint256 Type of meta provider\"}},\"name()\":{\"returns\":{\"name\":\"string name of the plugin\"}},\"requiresRootAccess()\":{\"returns\":{\"requiresRootAccess\":\"True if root access is required, false otherwise.\"}},\"version()\":{\"returns\":{\"version\":\"string version of the plugin\"}}},\"title\":\"ISafeProtocolPlugin - An interface that a Safe plugin should implement\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"metaProvider()\":{\"notice\":\"A funtion that returns version of the plugin.         TODO: Define types of meta provider and possible values of location in each of the cases.\"},\"name()\":{\"notice\":\"A funtion that returns name of the plugin\"},\"requiresRootAccess()\":{\"notice\":\"A function that indicates if the plugin requires root access to a Safe.\"},\"version()\":{\"notice\":\"A funtion that returns version of the plugin\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@safe-global/safe-core-protocol/contracts/interfaces/Integrations.sol\":\"ISafeProtocolPlugin\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@safe-global/safe-core-protocol/contracts/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.18;\\n\\nstruct SafeProtocolAction {\\n    address payable to;\\n    uint256 value;\\n    bytes data;\\n}\\n\\nstruct SafeTransaction {\\n    SafeProtocolAction[] actions;\\n    uint256 nonce;\\n    bytes32 metaHash;\\n}\\n\\nstruct SafeRootAccess {\\n    SafeProtocolAction action;\\n    uint256 nonce;\\n    bytes32 metaHash;\\n}\\n\",\"keccak256\":\"0xd06d030a904b0d962f3ecd294a6c290c2d336d5df44b6f7a88b35bc9e7b10a0e\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-core-protocol/contracts/interfaces/Accounts.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.18;\\n\\n/**\\n * @title ISafe Declares the functions that are called on a Safe by Safe protocol.\\n */\\ninterface ISafe {\\n    function execTransactionFromModule(\\n        address payable to,\\n        uint256 value,\\n        bytes calldata data,\\n        uint8 operation\\n    ) external returns (bool success);\\n\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        uint8 operation\\n    ) external returns (bool success, bytes memory returnData);\\n}\\n\",\"keccak256\":\"0x46ab51acf3f12d9dd20d2a0324553e24897e49385dd4a49c7e0cb06cff2611c0\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-core-protocol/contracts/interfaces/Integrations.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.18;\\nimport {ISafe} from \\\"./Accounts.sol\\\";\\nimport {SafeTransaction, SafeRootAccess} from \\\"../DataTypes.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title ISafeProtocolStaticFunctionHandler - An interface that a Safe functionhandler should implement\\n * @notice In Safe protocol, a function handler can be used to add additional functionality to a Safe.\\n *         TODO: Add more explaination.\\n */\\ninterface ISafeProtocolFunctionHandler {\\n    /**\\n     * @notice TODO: Add more explaination\\n     * @param safe A Safe instance\\n     * @param sender Address of the sender\\n     * @param value Amount of ETH\\n     * @param data Arbitrary length bytes\\n     * @return result Arbitrary length bytes containing result of the operation\\n     */\\n    function handle(ISafe safe, address sender, uint256 value, bytes calldata data) external returns (bytes memory result);\\n}\\n\\n/**\\n * @title ISafeProtocolStaticFunctionHandler - An interface that a Safe functionhandler should implement in case when handling static calls\\n * @notice In Safe protocol, a function handler can be used to add additional functionality to a Safe.\\n *         TODO: Add more explaination.\\n */\\ninterface ISafeProtocolStaticFunctionHandler {\\n    /**\\n     * @notice TODO: Add more explaination\\n     * @param safe A Safe instance\\n     * @param sender Address of the sender\\n     * @param value Amount of ETH\\n     * @param data Arbitrary length bytes\\n     * @return result Arbitrary length bytes containing result of the operation\\n     */\\n    function handle(ISafe safe, address sender, uint256 value, bytes calldata data) external view returns (bytes memory result);\\n}\\n\\n/**\\n * @title ISafeProtocolHooks - An interface that a contract should implement to be enabled as hooks.\\n * @notice In Safe protocol, hooks can approve or deny transactions based on the logic it implements.\\n */\\ninterface ISafeProtocolHooks is IERC165 {\\n    /**\\n     * @notice A function that will be called by a Safe before the execution of a transaction if the hooks are enabled\\n     * @dev Add custom logic in this function to validate the pre-state and contents of transaction for non-root access.\\n     * @param safe A Safe instance\\n     * @param tx A struct of type SafeTransaction that contains the details of the transaction.\\n     * @param executionType uint256\\n     * @param executionMeta Arbitrary length of bytes\\n     * @return preCheckData bytes\\n     */\\n    function preCheck(\\n        ISafe safe,\\n        SafeTransaction calldata tx,\\n        uint256 executionType,\\n        bytes calldata executionMeta\\n    ) external returns (bytes memory preCheckData);\\n\\n    /**\\n     * @notice A function that will be called by a safe before the execution of a transaction if the hooks are enabled and\\n     *         transaction requies tool access.\\n     * @dev Add custom logic in this function to validate the pre-state and contents of transaction for root access.\\n     * @param safe A Safe instance\\n     * @param rootAccess DataTypes.SafeRootAccess\\n     * @param executionType uint256\\n     * @param executionMeta bytes\\n     * @return preCheckData bytes\\n     */\\n    function preCheckRootAccess(\\n        ISafe safe,\\n        SafeRootAccess calldata rootAccess,\\n        uint256 executionType,\\n        bytes calldata executionMeta\\n    ) external returns (bytes memory preCheckData);\\n\\n    /**\\n     * @notice A function that will be called by a safe after the execution of a transaction if the hooks are enabled. Hooks should revert if the post state of after the transaction is not as expected.\\n     * @dev Add custom logic in this function to validate the post-state after the transaction is executed.\\n     * @param safe ISafe\\n     * @param success bool\\n     * @param preCheckData Arbitrary length bytes that was returned by during pre-check of the transaction.\\n     */\\n    function postCheck(ISafe safe, bool success, bytes calldata preCheckData) external;\\n}\\n\\n/**\\n * @title ISafeProtocolPlugin - An interface that a Safe plugin should implement\\n */\\ninterface ISafeProtocolPlugin {\\n    /**\\n     * @notice A funtion that returns name of the plugin\\n     * @return name string name of the plugin\\n     */\\n    function name() external view returns (string memory name);\\n\\n    /**\\n     * @notice A funtion that returns version of the plugin\\n     * @return version string version of the plugin\\n     */\\n    function version() external view returns (string memory version);\\n\\n    /**\\n     * @notice A funtion that returns version of the plugin.\\n     *         TODO: Define types of meta provider and possible values of location in each of the cases.\\n     * @return providerType uint256 Type of meta provider\\n     * @return location bytes\\n     */\\n    function metaProvider() external view returns (uint256 providerType, bytes memory location);\\n\\n    /**\\n     * @notice A function that indicates if the plugin requires root access to a Safe.\\n     * @return requiresRootAccess True if root access is required, false otherwise.\\n     */\\n    function requiresRootAccess() external view returns (bool requiresRootAccess);\\n}\\n\",\"keccak256\":\"0xc761fbe6d3f2fceb7d7072931acdfa1704f7a78d6d5aed052bd9530d9d6797ee\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"metaProvider()":{"notice":"A funtion that returns version of the plugin.         TODO: Define types of meta provider and possible values of location in each of the cases."},"name()":{"notice":"A funtion that returns name of the plugin"},"requiresRootAccess()":{"notice":"A function that indicates if the plugin requires root access to a Safe."},"version()":{"notice":"A funtion that returns version of the plugin"}},"version":1}},"ISafeProtocolStaticFunctionHandler":{"abi":[{"inputs":[{"internalType":"contract ISafe","name":"safe","type":"address"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"handle","outputs":[{"internalType":"bytes","name":"result","type":"bytes"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"handle(address,address,uint256,bytes)":{"params":{"data":"Arbitrary length bytes","safe":"A Safe instance","sender":"Address of the sender","value":"Amount of ETH"},"returns":{"result":"Arbitrary length bytes containing result of the operation"}}},"title":"ISafeProtocolStaticFunctionHandler - An interface that a Safe functionhandler should implement in case when handling static calls","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"handle(address,address,uint256,bytes)":"25d6803f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISafe\",\"name\":\"safe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"handle\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"handle(address,address,uint256,bytes)\":{\"params\":{\"data\":\"Arbitrary length bytes\",\"safe\":\"A Safe instance\",\"sender\":\"Address of the sender\",\"value\":\"Amount of ETH\"},\"returns\":{\"result\":\"Arbitrary length bytes containing result of the operation\"}}},\"title\":\"ISafeProtocolStaticFunctionHandler - An interface that a Safe functionhandler should implement in case when handling static calls\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"handle(address,address,uint256,bytes)\":{\"notice\":\"TODO: Add more explaination\"}},\"notice\":\"In Safe protocol, a function handler can be used to add additional functionality to a Safe.         TODO: Add more explaination.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@safe-global/safe-core-protocol/contracts/interfaces/Integrations.sol\":\"ISafeProtocolStaticFunctionHandler\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@safe-global/safe-core-protocol/contracts/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.18;\\n\\nstruct SafeProtocolAction {\\n    address payable to;\\n    uint256 value;\\n    bytes data;\\n}\\n\\nstruct SafeTransaction {\\n    SafeProtocolAction[] actions;\\n    uint256 nonce;\\n    bytes32 metaHash;\\n}\\n\\nstruct SafeRootAccess {\\n    SafeProtocolAction action;\\n    uint256 nonce;\\n    bytes32 metaHash;\\n}\\n\",\"keccak256\":\"0xd06d030a904b0d962f3ecd294a6c290c2d336d5df44b6f7a88b35bc9e7b10a0e\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-core-protocol/contracts/interfaces/Accounts.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.18;\\n\\n/**\\n * @title ISafe Declares the functions that are called on a Safe by Safe protocol.\\n */\\ninterface ISafe {\\n    function execTransactionFromModule(\\n        address payable to,\\n        uint256 value,\\n        bytes calldata data,\\n        uint8 operation\\n    ) external returns (bool success);\\n\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        uint8 operation\\n    ) external returns (bool success, bytes memory returnData);\\n}\\n\",\"keccak256\":\"0x46ab51acf3f12d9dd20d2a0324553e24897e49385dd4a49c7e0cb06cff2611c0\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-core-protocol/contracts/interfaces/Integrations.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.18;\\nimport {ISafe} from \\\"./Accounts.sol\\\";\\nimport {SafeTransaction, SafeRootAccess} from \\\"../DataTypes.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title ISafeProtocolStaticFunctionHandler - An interface that a Safe functionhandler should implement\\n * @notice In Safe protocol, a function handler can be used to add additional functionality to a Safe.\\n *         TODO: Add more explaination.\\n */\\ninterface ISafeProtocolFunctionHandler {\\n    /**\\n     * @notice TODO: Add more explaination\\n     * @param safe A Safe instance\\n     * @param sender Address of the sender\\n     * @param value Amount of ETH\\n     * @param data Arbitrary length bytes\\n     * @return result Arbitrary length bytes containing result of the operation\\n     */\\n    function handle(ISafe safe, address sender, uint256 value, bytes calldata data) external returns (bytes memory result);\\n}\\n\\n/**\\n * @title ISafeProtocolStaticFunctionHandler - An interface that a Safe functionhandler should implement in case when handling static calls\\n * @notice In Safe protocol, a function handler can be used to add additional functionality to a Safe.\\n *         TODO: Add more explaination.\\n */\\ninterface ISafeProtocolStaticFunctionHandler {\\n    /**\\n     * @notice TODO: Add more explaination\\n     * @param safe A Safe instance\\n     * @param sender Address of the sender\\n     * @param value Amount of ETH\\n     * @param data Arbitrary length bytes\\n     * @return result Arbitrary length bytes containing result of the operation\\n     */\\n    function handle(ISafe safe, address sender, uint256 value, bytes calldata data) external view returns (bytes memory result);\\n}\\n\\n/**\\n * @title ISafeProtocolHooks - An interface that a contract should implement to be enabled as hooks.\\n * @notice In Safe protocol, hooks can approve or deny transactions based on the logic it implements.\\n */\\ninterface ISafeProtocolHooks is IERC165 {\\n    /**\\n     * @notice A function that will be called by a Safe before the execution of a transaction if the hooks are enabled\\n     * @dev Add custom logic in this function to validate the pre-state and contents of transaction for non-root access.\\n     * @param safe A Safe instance\\n     * @param tx A struct of type SafeTransaction that contains the details of the transaction.\\n     * @param executionType uint256\\n     * @param executionMeta Arbitrary length of bytes\\n     * @return preCheckData bytes\\n     */\\n    function preCheck(\\n        ISafe safe,\\n        SafeTransaction calldata tx,\\n        uint256 executionType,\\n        bytes calldata executionMeta\\n    ) external returns (bytes memory preCheckData);\\n\\n    /**\\n     * @notice A function that will be called by a safe before the execution of a transaction if the hooks are enabled and\\n     *         transaction requies tool access.\\n     * @dev Add custom logic in this function to validate the pre-state and contents of transaction for root access.\\n     * @param safe A Safe instance\\n     * @param rootAccess DataTypes.SafeRootAccess\\n     * @param executionType uint256\\n     * @param executionMeta bytes\\n     * @return preCheckData bytes\\n     */\\n    function preCheckRootAccess(\\n        ISafe safe,\\n        SafeRootAccess calldata rootAccess,\\n        uint256 executionType,\\n        bytes calldata executionMeta\\n    ) external returns (bytes memory preCheckData);\\n\\n    /**\\n     * @notice A function that will be called by a safe after the execution of a transaction if the hooks are enabled. Hooks should revert if the post state of after the transaction is not as expected.\\n     * @dev Add custom logic in this function to validate the post-state after the transaction is executed.\\n     * @param safe ISafe\\n     * @param success bool\\n     * @param preCheckData Arbitrary length bytes that was returned by during pre-check of the transaction.\\n     */\\n    function postCheck(ISafe safe, bool success, bytes calldata preCheckData) external;\\n}\\n\\n/**\\n * @title ISafeProtocolPlugin - An interface that a Safe plugin should implement\\n */\\ninterface ISafeProtocolPlugin {\\n    /**\\n     * @notice A funtion that returns name of the plugin\\n     * @return name string name of the plugin\\n     */\\n    function name() external view returns (string memory name);\\n\\n    /**\\n     * @notice A funtion that returns version of the plugin\\n     * @return version string version of the plugin\\n     */\\n    function version() external view returns (string memory version);\\n\\n    /**\\n     * @notice A funtion that returns version of the plugin.\\n     *         TODO: Define types of meta provider and possible values of location in each of the cases.\\n     * @return providerType uint256 Type of meta provider\\n     * @return location bytes\\n     */\\n    function metaProvider() external view returns (uint256 providerType, bytes memory location);\\n\\n    /**\\n     * @notice A function that indicates if the plugin requires root access to a Safe.\\n     * @return requiresRootAccess True if root access is required, false otherwise.\\n     */\\n    function requiresRootAccess() external view returns (bool requiresRootAccess);\\n}\\n\",\"keccak256\":\"0xc761fbe6d3f2fceb7d7072931acdfa1704f7a78d6d5aed052bd9530d9d6797ee\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"handle(address,address,uint256,bytes)":{"notice":"TODO: Add more explaination"}},"notice":"In Safe protocol, a function handler can be used to add additional functionality to a Safe.         TODO: Add more explaination.","version":1}}},"contracts/TestHook.sol":{"TestHook":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"bool","name":"success","type":"bool"},{"indexed":false,"internalType":"bytes","name":"preCheckData","type":"bytes"}],"name":"PostCheckCalled","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"executionType","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"executionMeta","type":"bytes"}],"name":"PreCheckCalled","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"executionType","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"executionMeta","type":"bytes"}],"name":"PreCheckRootAccessCalled","type":"event"},{"inputs":[{"internalType":"contract ISafe","name":"safe","type":"address"},{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"preCheckData","type":"bytes"}],"name":"postCheck","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract ISafe","name":"safe","type":"address"},{"components":[{"components":[{"internalType":"address payable","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct SafeProtocolAction[]","name":"actions","type":"tuple[]"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"metaHash","type":"bytes32"}],"internalType":"struct SafeTransaction","name":"tx","type":"tuple"},{"internalType":"uint256","name":"executionType","type":"uint256"},{"internalType":"bytes","name":"executionMeta","type":"bytes"}],"name":"preCheck","outputs":[{"internalType":"bytes","name":"preCheckData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract ISafe","name":"safe","type":"address"},{"components":[{"components":[{"internalType":"address payable","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct SafeProtocolAction","name":"action","type":"tuple"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"metaHash","type":"bytes32"}],"internalType":"struct SafeRootAccess","name":"rootAccess","type":"tuple"},{"internalType":"uint256","name":"executionType","type":"uint256"},{"internalType":"bytes","name":"executionMeta","type":"bytes"}],"name":"preCheckRootAccess","outputs":[{"internalType":"bytes","name":"preCheckData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"postCheck(address,bool,bytes)":{"details":"Add custom logic in this function to validate the post-state after the transaction is executed.","params":{"preCheckData":"Arbitrary length bytes that was returned by during pre-check of the transaction.","safe":"ISafe","success":"bool"}},"preCheck(address,((address,uint256,bytes)[],uint256,bytes32),uint256,bytes)":{"details":"Add custom logic in this function to validate the pre-state and contents of transaction for non-root access.","params":{"executionMeta":"Arbitrary length of bytes","executionType":"uint256","safe":"A Safe instance","tx":"A struct of type SafeTransaction that contains the details of the transaction."},"returns":{"preCheckData":"bytes"}},"preCheckRootAccess(address,((address,uint256,bytes),uint256,bytes32),uint256,bytes)":{"details":"Add custom logic in this function to validate the pre-state and contents of transaction for root access.","params":{"executionMeta":"bytes","executionType":"uint256","rootAccess":"DataTypes.SafeRootAccess","safe":"A Safe instance"},"returns":{"preCheckData":"bytes"}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50610798806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806301ffc9a714610051578063176ae7b7146100815780637359b742146100b1578063f44d4ca3146100e1575b600080fd5b61006b6004803603810190610066919061023d565b6100fd565b6040516100789190610285565b60405180910390f35b61009b600480360381019061009691906103cf565b610108565b6040516100a89190610503565b60405180910390f35b6100cb60048036038101906100c69190610544565b610150565b6040516100d89190610503565b60405180910390f35b6100fb60048036038101906100f69190610614565b610198565b005b600060019050919050565b60607fba141d1e6792303b9e9126885cd31f5e91dc6b15836c7214f821b163a069cbf43385858560405161013f94939291906106e2565b60405180910390a195945050505050565b60607f3256a4f1a2ba63603d140a241b17453003a8c7458eb8264328d35f440d5d392a3385858560405161018794939291906106e2565b60405180910390a195945050505050565b7f56fe939208d9884dede3b0a4f4168be3c4f445b3280bda9682397aaac12e06b2338484846040516101cd9493929190610722565b60405180910390a150505050565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61021a816101e5565b811461022557600080fd5b50565b60008135905061023781610211565b92915050565b600060208284031215610253576102526101db565b5b600061026184828501610228565b91505092915050565b60008115159050919050565b61027f8161026a565b82525050565b600060208201905061029a6000830184610276565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102cb826102a0565b9050919050565b60006102dd826102c0565b9050919050565b6102ed816102d2565b81146102f857600080fd5b50565b60008135905061030a816102e4565b92915050565b600080fd5b60006060828403121561032b5761032a610310565b5b81905092915050565b6000819050919050565b61034781610334565b811461035257600080fd5b50565b6000813590506103648161033e565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261038f5761038e61036a565b5b8235905067ffffffffffffffff8111156103ac576103ab61036f565b5b6020830191508360018202830111156103c8576103c7610374565b5b9250929050565b6000806000806000608086880312156103eb576103ea6101db565b5b60006103f9888289016102fb565b955050602086013567ffffffffffffffff81111561041a576104196101e0565b5b61042688828901610315565b945050604061043788828901610355565b935050606086013567ffffffffffffffff811115610458576104576101e0565b5b61046488828901610379565b92509250509295509295909350565b600081519050919050565b600082825260208201905092915050565b60005b838110156104ad578082015181840152602081019050610492565b60008484015250505050565b6000601f19601f8301169050919050565b60006104d582610473565b6104df818561047e565b93506104ef81856020860161048f565b6104f8816104b9565b840191505092915050565b6000602082019050818103600083015261051d81846104ca565b905092915050565b60006060828403121561053b5761053a610310565b5b81905092915050565b6000806000806000608086880312156105605761055f6101db565b5b600061056e888289016102fb565b955050602086013567ffffffffffffffff81111561058f5761058e6101e0565b5b61059b88828901610525565b94505060406105ac88828901610355565b935050606086013567ffffffffffffffff8111156105cd576105cc6101e0565b5b6105d988828901610379565b92509250509295509295909350565b6105f18161026a565b81146105fc57600080fd5b50565b60008135905061060e816105e8565b92915050565b6000806000806060858703121561062e5761062d6101db565b5b600061063c878288016102fb565b945050602061064d878288016105ff565b935050604085013567ffffffffffffffff81111561066e5761066d6101e0565b5b61067a87828801610379565b925092505092959194509250565b610691816102c0565b82525050565b6106a081610334565b82525050565b82818337600083830152505050565b60006106c1838561047e565b93506106ce8385846106a6565b6106d7836104b9565b840190509392505050565b60006060820190506106f76000830187610688565b6107046020830186610697565b81810360408301526107178184866106b5565b905095945050505050565b60006060820190506107376000830187610688565b6107446020830186610276565b81810360408301526107578184866106b5565b90509594505050505056fea2646970667358221220927463f30623ab2e620ab1f9acdc8c5ac39d1f2a51e65a1f01e66681bc6a0f4764736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x798 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x176AE7B7 EQ PUSH2 0x81 JUMPI DUP1 PUSH4 0x7359B742 EQ PUSH2 0xB1 JUMPI DUP1 PUSH4 0xF44D4CA3 EQ PUSH2 0xE1 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x66 SWAP2 SWAP1 PUSH2 0x23D JUMP JUMPDEST PUSH2 0xFD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x78 SWAP2 SWAP1 PUSH2 0x285 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x9B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x96 SWAP2 SWAP1 PUSH2 0x3CF JUMP JUMPDEST PUSH2 0x108 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA8 SWAP2 SWAP1 PUSH2 0x503 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xCB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xC6 SWAP2 SWAP1 PUSH2 0x544 JUMP JUMPDEST PUSH2 0x150 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD8 SWAP2 SWAP1 PUSH2 0x503 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xF6 SWAP2 SWAP1 PUSH2 0x614 JUMP JUMPDEST PUSH2 0x198 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0xBA141D1E6792303B9E9126885CD31F5E91DC6B15836C7214F821B163A069CBF4 CALLER DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x13F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0x3256A4F1A2BA63603D140A241B17453003A8C7458EB8264328D35F440D5D392A CALLER DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x187 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x56FE939208D9884DEDE3B0A4F4168BE3C4F445B3280BDA9682397AAAC12E06B2 CALLER DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x722 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x21A DUP2 PUSH2 0x1E5 JUMP JUMPDEST DUP2 EQ PUSH2 0x225 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x237 DUP2 PUSH2 0x211 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x253 JUMPI PUSH2 0x252 PUSH2 0x1DB JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x261 DUP5 DUP3 DUP6 ADD PUSH2 0x228 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x27F DUP2 PUSH2 0x26A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x29A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x276 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CB DUP3 PUSH2 0x2A0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DD DUP3 PUSH2 0x2C0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2ED DUP2 PUSH2 0x2D2 JUMP JUMPDEST DUP2 EQ PUSH2 0x2F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x30A DUP2 PUSH2 0x2E4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x32B JUMPI PUSH2 0x32A PUSH2 0x310 JUMP JUMPDEST JUMPDEST DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x347 DUP2 PUSH2 0x334 JUMP JUMPDEST DUP2 EQ PUSH2 0x352 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x364 DUP2 PUSH2 0x33E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x38F JUMPI PUSH2 0x38E PUSH2 0x36A JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3AC JUMPI PUSH2 0x3AB PUSH2 0x36F JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x3C8 JUMPI PUSH2 0x3C7 PUSH2 0x374 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3EB JUMPI PUSH2 0x3EA PUSH2 0x1DB JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3F9 DUP9 DUP3 DUP10 ADD PUSH2 0x2FB JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x41A JUMPI PUSH2 0x419 PUSH2 0x1E0 JUMP JUMPDEST JUMPDEST PUSH2 0x426 DUP9 DUP3 DUP10 ADD PUSH2 0x315 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x437 DUP9 DUP3 DUP10 ADD PUSH2 0x355 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x458 JUMPI PUSH2 0x457 PUSH2 0x1E0 JUMP JUMPDEST JUMPDEST PUSH2 0x464 DUP9 DUP3 DUP10 ADD PUSH2 0x379 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4AD JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x492 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4D5 DUP3 PUSH2 0x473 JUMP JUMPDEST PUSH2 0x4DF DUP2 DUP6 PUSH2 0x47E JUMP JUMPDEST SWAP4 POP PUSH2 0x4EF DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x48F JUMP JUMPDEST PUSH2 0x4F8 DUP2 PUSH2 0x4B9 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x51D DUP2 DUP5 PUSH2 0x4CA JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x53B JUMPI PUSH2 0x53A PUSH2 0x310 JUMP JUMPDEST JUMPDEST DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x560 JUMPI PUSH2 0x55F PUSH2 0x1DB JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x56E DUP9 DUP3 DUP10 ADD PUSH2 0x2FB JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x58F JUMPI PUSH2 0x58E PUSH2 0x1E0 JUMP JUMPDEST JUMPDEST PUSH2 0x59B DUP9 DUP3 DUP10 ADD PUSH2 0x525 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x5AC DUP9 DUP3 DUP10 ADD PUSH2 0x355 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x5CD JUMPI PUSH2 0x5CC PUSH2 0x1E0 JUMP JUMPDEST JUMPDEST PUSH2 0x5D9 DUP9 DUP3 DUP10 ADD PUSH2 0x379 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH2 0x5F1 DUP2 PUSH2 0x26A JUMP JUMPDEST DUP2 EQ PUSH2 0x5FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x60E DUP2 PUSH2 0x5E8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x62E JUMPI PUSH2 0x62D PUSH2 0x1DB JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x63C DUP8 DUP3 DUP9 ADD PUSH2 0x2FB JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x64D DUP8 DUP3 DUP9 ADD PUSH2 0x5FF JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x66E JUMPI PUSH2 0x66D PUSH2 0x1E0 JUMP JUMPDEST JUMPDEST PUSH2 0x67A DUP8 DUP3 DUP9 ADD PUSH2 0x379 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH2 0x691 DUP2 PUSH2 0x2C0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x6A0 DUP2 PUSH2 0x334 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6C1 DUP4 DUP6 PUSH2 0x47E JUMP JUMPDEST SWAP4 POP PUSH2 0x6CE DUP4 DUP6 DUP5 PUSH2 0x6A6 JUMP JUMPDEST PUSH2 0x6D7 DUP4 PUSH2 0x4B9 JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x6F7 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x688 JUMP JUMPDEST PUSH2 0x704 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x697 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x717 DUP2 DUP5 DUP7 PUSH2 0x6B5 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x737 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x688 JUMP JUMPDEST PUSH2 0x744 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x276 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x757 DUP2 DUP5 DUP7 PUSH2 0x6B5 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP3 PUSH21 0x63F30623AB2E620AB1F9ACDC8C5AC39D1F2A51E65A 0x1F ADD 0xE6 PUSH7 0x81BC6A0F476473 PUSH16 0x6C634300081200330000000000000000 ","sourceMap":"373:2649:4:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@postCheck_289":{"entryPoint":408,"id":289,"parameterSlots":4,"returnSlots":0},"@preCheckRootAccess_270":{"entryPoint":336,"id":270,"parameterSlots":5,"returnSlots":1},"@preCheck_246":{"entryPoint":264,"id":246,"parameterSlots":5,"returnSlots":1},"@supportsInterface_299":{"entryPoint":253,"id":299,"parameterSlots":1,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":1535,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":552,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_calldata_ptr":{"entryPoint":889,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_contract$_ISafe_$69":{"entryPoint":763,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_struct$_SafeRootAccess_$37_calldata_ptr":{"entryPoint":1317,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_struct$_SafeTransaction_$29_calldata_ptr":{"entryPoint":789,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":853,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4":{"entryPoint":573,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_ISafe_$69t_boolt_bytes_calldata_ptr":{"entryPoint":1556,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_contract$_ISafe_$69t_struct$_SafeRootAccess_$37_calldata_ptrt_uint256t_bytes_calldata_ptr":{"entryPoint":1348,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_contract$_ISafe_$69t_struct$_SafeTransaction_$29_calldata_ptrt_uint256t_bytes_calldata_ptr":{"entryPoint":975,"id":null,"parameterSlots":2,"returnSlots":5},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":1672,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":630,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":1717,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":1226,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":1687,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address_t_bool_t_bytes_calldata_ptr__to_t_address_t_bool_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":1826,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_bytes_calldata_ptr__to_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":1762,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":645,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":1283,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":1139,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":1150,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":704,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":618,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":485,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_contract$_ISafe_$69":{"entryPoint":722,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":672,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":820,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory_with_cleanup":{"entryPoint":1702,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":1167,"id":null,"parameterSlots":3,"returnSlots":0},"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490":{"entryPoint":879,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":874,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d":{"entryPoint":784,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":884,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":480,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":475,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":1209,"id":null,"parameterSlots":1,"returnSlots":1},"validator_revert_t_bool":{"entryPoint":1512,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":529,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_contract$_ISafe_$69":{"entryPoint":740,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":830,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:10857:5","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:5","statements":[{"nodeType":"YulAssignment","src":"57:19:5","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:5","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:5"},"nodeType":"YulFunctionCall","src":"67:9:5"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:5"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:5","type":""}],"src":"7:75:5"},{"body":{"nodeType":"YulBlock","src":"177:28:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:5"},"nodeType":"YulFunctionCall","src":"187:12:5"},"nodeType":"YulExpressionStatement","src":"187:12:5"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:5"},{"body":{"nodeType":"YulBlock","src":"300:28:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:5"},"nodeType":"YulFunctionCall","src":"310:12:5"},"nodeType":"YulExpressionStatement","src":"310:12:5"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:5"},{"body":{"nodeType":"YulBlock","src":"378:105:5","statements":[{"nodeType":"YulAssignment","src":"388:89:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"403:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"410:66:5","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"399:3:5"},"nodeType":"YulFunctionCall","src":"399:78:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"388:7:5"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"360:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"370:7:5","type":""}],"src":"334:149:5"},{"body":{"nodeType":"YulBlock","src":"531:78:5","statements":[{"body":{"nodeType":"YulBlock","src":"587:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"596:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"599:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"589:6:5"},"nodeType":"YulFunctionCall","src":"589:12:5"},"nodeType":"YulExpressionStatement","src":"589:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"554:5:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"578:5:5"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"561:16:5"},"nodeType":"YulFunctionCall","src":"561:23:5"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"551:2:5"},"nodeType":"YulFunctionCall","src":"551:34:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"544:6:5"},"nodeType":"YulFunctionCall","src":"544:42:5"},"nodeType":"YulIf","src":"541:62:5"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"524:5:5","type":""}],"src":"489:120:5"},{"body":{"nodeType":"YulBlock","src":"666:86:5","statements":[{"nodeType":"YulAssignment","src":"676:29:5","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"698:6:5"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:5"},"nodeType":"YulFunctionCall","src":"685:20:5"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:5"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"740:5:5"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"714:25:5"},"nodeType":"YulFunctionCall","src":"714:32:5"},"nodeType":"YulExpressionStatement","src":"714:32:5"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"644:6:5","type":""},{"name":"end","nodeType":"YulTypedName","src":"652:3:5","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"660:5:5","type":""}],"src":"615:137:5"},{"body":{"nodeType":"YulBlock","src":"823:262:5","statements":[{"body":{"nodeType":"YulBlock","src":"869:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"871:77:5"},"nodeType":"YulFunctionCall","src":"871:79:5"},"nodeType":"YulExpressionStatement","src":"871:79:5"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"844:7:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"840:3:5"},"nodeType":"YulFunctionCall","src":"840:23:5"},{"kind":"number","nodeType":"YulLiteral","src":"865:2:5","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"836:3:5"},"nodeType":"YulFunctionCall","src":"836:32:5"},"nodeType":"YulIf","src":"833:119:5"},{"nodeType":"YulBlock","src":"962:116:5","statements":[{"nodeType":"YulVariableDeclaration","src":"977:15:5","value":{"kind":"number","nodeType":"YulLiteral","src":"991:1:5","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"981:6:5","type":""}]},{"nodeType":"YulAssignment","src":"1006:62:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1040:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"1051:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:5"},"nodeType":"YulFunctionCall","src":"1036:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1060:7:5"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"1016:19:5"},"nodeType":"YulFunctionCall","src":"1016:52:5"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1006:6:5"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"793:9:5","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"804:7:5","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"816:6:5","type":""}],"src":"758:327:5"},{"body":{"nodeType":"YulBlock","src":"1133:48:5","statements":[{"nodeType":"YulAssignment","src":"1143:32:5","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1161:6:5"},"nodeType":"YulFunctionCall","src":"1161:13:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1154:6:5"},"nodeType":"YulFunctionCall","src":"1154:21:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1143:7:5"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1115:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1125:7:5","type":""}],"src":"1091:90:5"},{"body":{"nodeType":"YulBlock","src":"1246:50:5","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1263:3:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1283:5:5"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1268:14:5"},"nodeType":"YulFunctionCall","src":"1268:21:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1256:6:5"},"nodeType":"YulFunctionCall","src":"1256:34:5"},"nodeType":"YulExpressionStatement","src":"1256:34:5"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1234:5:5","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1241:3:5","type":""}],"src":"1187:109:5"},{"body":{"nodeType":"YulBlock","src":"1394:118:5","statements":[{"nodeType":"YulAssignment","src":"1404:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"1427:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:5"},"nodeType":"YulFunctionCall","src":"1412:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1404:4:5"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1478:6:5"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"1502:1:5","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:5"},"nodeType":"YulFunctionCall","src":"1487:17:5"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"1440:37:5"},"nodeType":"YulFunctionCall","src":"1440:65:5"},"nodeType":"YulExpressionStatement","src":"1440:65:5"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:5","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1378:6:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1389:4:5","type":""}],"src":"1302:210:5"},{"body":{"nodeType":"YulBlock","src":"1563:81:5","statements":[{"nodeType":"YulAssignment","src":"1573:65:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1588:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"1595:42:5","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1584:3:5"},"nodeType":"YulFunctionCall","src":"1584:54:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1573:7:5"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1545:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1555:7:5","type":""}],"src":"1518:126:5"},{"body":{"nodeType":"YulBlock","src":"1695:51:5","statements":[{"nodeType":"YulAssignment","src":"1705:35:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1734:5:5"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"1716:17:5"},"nodeType":"YulFunctionCall","src":"1716:24:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1705:7:5"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1677:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1687:7:5","type":""}],"src":"1650:96:5"},{"body":{"nodeType":"YulBlock","src":"1809:51:5","statements":[{"nodeType":"YulAssignment","src":"1819:35:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1848:5:5"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"1830:17:5"},"nodeType":"YulFunctionCall","src":"1830:24:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1819:7:5"}]}]},"name":"cleanup_t_contract$_ISafe_$69","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1791:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1801:7:5","type":""}],"src":"1752:108:5"},{"body":{"nodeType":"YulBlock","src":"1921:91:5","statements":[{"body":{"nodeType":"YulBlock","src":"1990:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1999:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2002:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1992:6:5"},"nodeType":"YulFunctionCall","src":"1992:12:5"},"nodeType":"YulExpressionStatement","src":"1992:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1944:5:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1981:5:5"}],"functionName":{"name":"cleanup_t_contract$_ISafe_$69","nodeType":"YulIdentifier","src":"1951:29:5"},"nodeType":"YulFunctionCall","src":"1951:36:5"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1941:2:5"},"nodeType":"YulFunctionCall","src":"1941:47:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1934:6:5"},"nodeType":"YulFunctionCall","src":"1934:55:5"},"nodeType":"YulIf","src":"1931:75:5"}]},"name":"validator_revert_t_contract$_ISafe_$69","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1914:5:5","type":""}],"src":"1866:146:5"},{"body":{"nodeType":"YulBlock","src":"2082:99:5","statements":[{"nodeType":"YulAssignment","src":"2092:29:5","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2114:6:5"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2101:12:5"},"nodeType":"YulFunctionCall","src":"2101:20:5"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2092:5:5"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2169:5:5"}],"functionName":{"name":"validator_revert_t_contract$_ISafe_$69","nodeType":"YulIdentifier","src":"2130:38:5"},"nodeType":"YulFunctionCall","src":"2130:45:5"},"nodeType":"YulExpressionStatement","src":"2130:45:5"}]},"name":"abi_decode_t_contract$_ISafe_$69","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2060:6:5","type":""},{"name":"end","nodeType":"YulTypedName","src":"2068:3:5","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2076:5:5","type":""}],"src":"2018:163:5"},{"body":{"nodeType":"YulBlock","src":"2276:28:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2293:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2296:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2286:6:5"},"nodeType":"YulFunctionCall","src":"2286:12:5"},"nodeType":"YulExpressionStatement","src":"2286:12:5"}]},"name":"revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d","nodeType":"YulFunctionDefinition","src":"2187:117:5"},{"body":{"nodeType":"YulBlock","src":"2425:152:5","statements":[{"body":{"nodeType":"YulBlock","src":"2464:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d","nodeType":"YulIdentifier","src":"2466:77:5"},"nodeType":"YulFunctionCall","src":"2466:79:5"},"nodeType":"YulExpressionStatement","src":"2466:79:5"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"2446:3:5"},{"name":"offset","nodeType":"YulIdentifier","src":"2451:6:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2442:3:5"},"nodeType":"YulFunctionCall","src":"2442:16:5"},{"kind":"number","nodeType":"YulLiteral","src":"2460:2:5","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2438:3:5"},"nodeType":"YulFunctionCall","src":"2438:25:5"},"nodeType":"YulIf","src":"2435:112:5"},{"nodeType":"YulAssignment","src":"2556:15:5","value":{"name":"offset","nodeType":"YulIdentifier","src":"2565:6:5"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2556:5:5"}]}]},"name":"abi_decode_t_struct$_SafeTransaction_$29_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2403:6:5","type":""},{"name":"end","nodeType":"YulTypedName","src":"2411:3:5","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2419:5:5","type":""}],"src":"2340:237:5"},{"body":{"nodeType":"YulBlock","src":"2628:32:5","statements":[{"nodeType":"YulAssignment","src":"2638:16:5","value":{"name":"value","nodeType":"YulIdentifier","src":"2649:5:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2638:7:5"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2610:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2620:7:5","type":""}],"src":"2583:77:5"},{"body":{"nodeType":"YulBlock","src":"2709:79:5","statements":[{"body":{"nodeType":"YulBlock","src":"2766:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2775:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2778:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2768:6:5"},"nodeType":"YulFunctionCall","src":"2768:12:5"},"nodeType":"YulExpressionStatement","src":"2768:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2732:5:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2757:5:5"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"2739:17:5"},"nodeType":"YulFunctionCall","src":"2739:24:5"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2729:2:5"},"nodeType":"YulFunctionCall","src":"2729:35:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2722:6:5"},"nodeType":"YulFunctionCall","src":"2722:43:5"},"nodeType":"YulIf","src":"2719:63:5"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2702:5:5","type":""}],"src":"2666:122:5"},{"body":{"nodeType":"YulBlock","src":"2846:87:5","statements":[{"nodeType":"YulAssignment","src":"2856:29:5","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2878:6:5"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2865:12:5"},"nodeType":"YulFunctionCall","src":"2865:20:5"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2856:5:5"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2921:5:5"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"2894:26:5"},"nodeType":"YulFunctionCall","src":"2894:33:5"},"nodeType":"YulExpressionStatement","src":"2894:33:5"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2824:6:5","type":""},{"name":"end","nodeType":"YulTypedName","src":"2832:3:5","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2840:5:5","type":""}],"src":"2794:139:5"},{"body":{"nodeType":"YulBlock","src":"3028:28:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3045:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3048:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3038:6:5"},"nodeType":"YulFunctionCall","src":"3038:12:5"},"nodeType":"YulExpressionStatement","src":"3038:12:5"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"2939:117:5"},{"body":{"nodeType":"YulBlock","src":"3151:28:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3168:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3171:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3161:6:5"},"nodeType":"YulFunctionCall","src":"3161:12:5"},"nodeType":"YulExpressionStatement","src":"3161:12:5"}]},"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulFunctionDefinition","src":"3062:117:5"},{"body":{"nodeType":"YulBlock","src":"3274:28:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3291:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3294:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3284:6:5"},"nodeType":"YulFunctionCall","src":"3284:12:5"},"nodeType":"YulExpressionStatement","src":"3284:12:5"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"3185:117:5"},{"body":{"nodeType":"YulBlock","src":"3395:478:5","statements":[{"body":{"nodeType":"YulBlock","src":"3444:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"3446:77:5"},"nodeType":"YulFunctionCall","src":"3446:79:5"},"nodeType":"YulExpressionStatement","src":"3446:79:5"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3423:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"3431:4:5","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3419:3:5"},"nodeType":"YulFunctionCall","src":"3419:17:5"},{"name":"end","nodeType":"YulIdentifier","src":"3438:3:5"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3415:3:5"},"nodeType":"YulFunctionCall","src":"3415:27:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3408:6:5"},"nodeType":"YulFunctionCall","src":"3408:35:5"},"nodeType":"YulIf","src":"3405:122:5"},{"nodeType":"YulAssignment","src":"3536:30:5","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3559:6:5"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3546:12:5"},"nodeType":"YulFunctionCall","src":"3546:20:5"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3536:6:5"}]},{"body":{"nodeType":"YulBlock","src":"3609:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulIdentifier","src":"3611:77:5"},"nodeType":"YulFunctionCall","src":"3611:79:5"},"nodeType":"YulExpressionStatement","src":"3611:79:5"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3581:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"3589:18:5","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3578:2:5"},"nodeType":"YulFunctionCall","src":"3578:30:5"},"nodeType":"YulIf","src":"3575:117:5"},{"nodeType":"YulAssignment","src":"3701:29:5","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3717:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"3725:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3713:3:5"},"nodeType":"YulFunctionCall","src":"3713:17:5"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"3701:8:5"}]},{"body":{"nodeType":"YulBlock","src":"3784:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"3786:77:5"},"nodeType":"YulFunctionCall","src":"3786:79:5"},"nodeType":"YulExpressionStatement","src":"3786:79:5"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"3749:8:5"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3763:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"3771:4:5","type":"","value":"0x01"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3759:3:5"},"nodeType":"YulFunctionCall","src":"3759:17:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3745:3:5"},"nodeType":"YulFunctionCall","src":"3745:32:5"},{"name":"end","nodeType":"YulIdentifier","src":"3779:3:5"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3742:2:5"},"nodeType":"YulFunctionCall","src":"3742:41:5"},"nodeType":"YulIf","src":"3739:128:5"}]},"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3362:6:5","type":""},{"name":"end","nodeType":"YulTypedName","src":"3370:3:5","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"3378:8:5","type":""},{"name":"length","nodeType":"YulTypedName","src":"3388:6:5","type":""}],"src":"3321:552:5"},{"body":{"nodeType":"YulBlock","src":"4060:1032:5","statements":[{"body":{"nodeType":"YulBlock","src":"4107:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4109:77:5"},"nodeType":"YulFunctionCall","src":"4109:79:5"},"nodeType":"YulExpressionStatement","src":"4109:79:5"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4081:7:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"4090:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4077:3:5"},"nodeType":"YulFunctionCall","src":"4077:23:5"},{"kind":"number","nodeType":"YulLiteral","src":"4102:3:5","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4073:3:5"},"nodeType":"YulFunctionCall","src":"4073:33:5"},"nodeType":"YulIf","src":"4070:120:5"},{"nodeType":"YulBlock","src":"4200:129:5","statements":[{"nodeType":"YulVariableDeclaration","src":"4215:15:5","value":{"kind":"number","nodeType":"YulLiteral","src":"4229:1:5","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4219:6:5","type":""}]},{"nodeType":"YulAssignment","src":"4244:75:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4291:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"4302:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4287:3:5"},"nodeType":"YulFunctionCall","src":"4287:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4311:7:5"}],"functionName":{"name":"abi_decode_t_contract$_ISafe_$69","nodeType":"YulIdentifier","src":"4254:32:5"},"nodeType":"YulFunctionCall","src":"4254:65:5"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4244:6:5"}]}]},{"nodeType":"YulBlock","src":"4339:311:5","statements":[{"nodeType":"YulVariableDeclaration","src":"4354:46:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4385:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"4396:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4381:3:5"},"nodeType":"YulFunctionCall","src":"4381:18:5"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4368:12:5"},"nodeType":"YulFunctionCall","src":"4368:32:5"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4358:6:5","type":""}]},{"body":{"nodeType":"YulBlock","src":"4447:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"4449:77:5"},"nodeType":"YulFunctionCall","src":"4449:79:5"},"nodeType":"YulExpressionStatement","src":"4449:79:5"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4419:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"4427:18:5","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4416:2:5"},"nodeType":"YulFunctionCall","src":"4416:30:5"},"nodeType":"YulIf","src":"4413:117:5"},{"nodeType":"YulAssignment","src":"4544:96:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4612:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"4623:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4608:3:5"},"nodeType":"YulFunctionCall","src":"4608:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4632:7:5"}],"functionName":{"name":"abi_decode_t_struct$_SafeTransaction_$29_calldata_ptr","nodeType":"YulIdentifier","src":"4554:53:5"},"nodeType":"YulFunctionCall","src":"4554:86:5"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4544:6:5"}]}]},{"nodeType":"YulBlock","src":"4660:118:5","statements":[{"nodeType":"YulVariableDeclaration","src":"4675:16:5","value":{"kind":"number","nodeType":"YulLiteral","src":"4689:2:5","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4679:6:5","type":""}]},{"nodeType":"YulAssignment","src":"4705:63:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4740:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"4751:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4736:3:5"},"nodeType":"YulFunctionCall","src":"4736:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4760:7:5"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4715:20:5"},"nodeType":"YulFunctionCall","src":"4715:53:5"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4705:6:5"}]}]},{"nodeType":"YulBlock","src":"4788:297:5","statements":[{"nodeType":"YulVariableDeclaration","src":"4803:46:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4834:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"4845:2:5","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4830:3:5"},"nodeType":"YulFunctionCall","src":"4830:18:5"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4817:12:5"},"nodeType":"YulFunctionCall","src":"4817:32:5"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4807:6:5","type":""}]},{"body":{"nodeType":"YulBlock","src":"4896:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"4898:77:5"},"nodeType":"YulFunctionCall","src":"4898:79:5"},"nodeType":"YulExpressionStatement","src":"4898:79:5"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4868:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"4876:18:5","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4865:2:5"},"nodeType":"YulFunctionCall","src":"4865:30:5"},"nodeType":"YulIf","src":"4862:117:5"},{"nodeType":"YulAssignment","src":"4993:82:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5047:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"5058:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5043:3:5"},"nodeType":"YulFunctionCall","src":"5043:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5067:7:5"}],"functionName":{"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulIdentifier","src":"5011:31:5"},"nodeType":"YulFunctionCall","src":"5011:64:5"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4993:6:5"},{"name":"value4","nodeType":"YulIdentifier","src":"5001:6:5"}]}]}]},"name":"abi_decode_tuple_t_contract$_ISafe_$69t_struct$_SafeTransaction_$29_calldata_ptrt_uint256t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3998:9:5","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4009:7:5","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4021:6:5","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4029:6:5","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4037:6:5","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4045:6:5","type":""},{"name":"value4","nodeType":"YulTypedName","src":"4053:6:5","type":""}],"src":"3879:1213:5"},{"body":{"nodeType":"YulBlock","src":"5156:40:5","statements":[{"nodeType":"YulAssignment","src":"5167:22:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5183:5:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5177:5:5"},"nodeType":"YulFunctionCall","src":"5177:12:5"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"5167:6:5"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5139:5:5","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"5149:6:5","type":""}],"src":"5098:98:5"},{"body":{"nodeType":"YulBlock","src":"5297:73:5","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5314:3:5"},{"name":"length","nodeType":"YulIdentifier","src":"5319:6:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5307:6:5"},"nodeType":"YulFunctionCall","src":"5307:19:5"},"nodeType":"YulExpressionStatement","src":"5307:19:5"},{"nodeType":"YulAssignment","src":"5335:29:5","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5354:3:5"},{"kind":"number","nodeType":"YulLiteral","src":"5359:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5350:3:5"},"nodeType":"YulFunctionCall","src":"5350:14:5"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"5335:11:5"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"5269:3:5","type":""},{"name":"length","nodeType":"YulTypedName","src":"5274:6:5","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"5285:11:5","type":""}],"src":"5202:168:5"},{"body":{"nodeType":"YulBlock","src":"5438:184:5","statements":[{"nodeType":"YulVariableDeclaration","src":"5448:10:5","value":{"kind":"number","nodeType":"YulLiteral","src":"5457:1:5","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"5452:1:5","type":""}]},{"body":{"nodeType":"YulBlock","src":"5517:63:5","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5542:3:5"},{"name":"i","nodeType":"YulIdentifier","src":"5547:1:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5538:3:5"},"nodeType":"YulFunctionCall","src":"5538:11:5"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5561:3:5"},{"name":"i","nodeType":"YulIdentifier","src":"5566:1:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5557:3:5"},"nodeType":"YulFunctionCall","src":"5557:11:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5551:5:5"},"nodeType":"YulFunctionCall","src":"5551:18:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5531:6:5"},"nodeType":"YulFunctionCall","src":"5531:39:5"},"nodeType":"YulExpressionStatement","src":"5531:39:5"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"5478:1:5"},{"name":"length","nodeType":"YulIdentifier","src":"5481:6:5"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5475:2:5"},"nodeType":"YulFunctionCall","src":"5475:13:5"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"5489:19:5","statements":[{"nodeType":"YulAssignment","src":"5491:15:5","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"5500:1:5"},{"kind":"number","nodeType":"YulLiteral","src":"5503:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5496:3:5"},"nodeType":"YulFunctionCall","src":"5496:10:5"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"5491:1:5"}]}]},"pre":{"nodeType":"YulBlock","src":"5471:3:5","statements":[]},"src":"5467:113:5"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5600:3:5"},{"name":"length","nodeType":"YulIdentifier","src":"5605:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5596:3:5"},"nodeType":"YulFunctionCall","src":"5596:16:5"},{"kind":"number","nodeType":"YulLiteral","src":"5614:1:5","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5589:6:5"},"nodeType":"YulFunctionCall","src":"5589:27:5"},"nodeType":"YulExpressionStatement","src":"5589:27:5"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"5420:3:5","type":""},{"name":"dst","nodeType":"YulTypedName","src":"5425:3:5","type":""},{"name":"length","nodeType":"YulTypedName","src":"5430:6:5","type":""}],"src":"5376:246:5"},{"body":{"nodeType":"YulBlock","src":"5676:54:5","statements":[{"nodeType":"YulAssignment","src":"5686:38:5","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5704:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"5711:2:5","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5700:3:5"},"nodeType":"YulFunctionCall","src":"5700:14:5"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5720:2:5","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5716:3:5"},"nodeType":"YulFunctionCall","src":"5716:7:5"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5696:3:5"},"nodeType":"YulFunctionCall","src":"5696:28:5"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"5686:6:5"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5659:5:5","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"5669:6:5","type":""}],"src":"5628:102:5"},{"body":{"nodeType":"YulBlock","src":"5826:283:5","statements":[{"nodeType":"YulVariableDeclaration","src":"5836:52:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5882:5:5"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"5850:31:5"},"nodeType":"YulFunctionCall","src":"5850:38:5"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5840:6:5","type":""}]},{"nodeType":"YulAssignment","src":"5897:77:5","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5962:3:5"},{"name":"length","nodeType":"YulIdentifier","src":"5967:6:5"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"5904:57:5"},"nodeType":"YulFunctionCall","src":"5904:70:5"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5897:3:5"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6022:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"6029:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6018:3:5"},"nodeType":"YulFunctionCall","src":"6018:16:5"},{"name":"pos","nodeType":"YulIdentifier","src":"6036:3:5"},{"name":"length","nodeType":"YulIdentifier","src":"6041:6:5"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"5983:34:5"},"nodeType":"YulFunctionCall","src":"5983:65:5"},"nodeType":"YulExpressionStatement","src":"5983:65:5"},{"nodeType":"YulAssignment","src":"6057:46:5","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6068:3:5"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6095:6:5"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"6073:21:5"},"nodeType":"YulFunctionCall","src":"6073:29:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6064:3:5"},"nodeType":"YulFunctionCall","src":"6064:39:5"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6057:3:5"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5807:5:5","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5814:3:5","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"5822:3:5","type":""}],"src":"5736:373:5"},{"body":{"nodeType":"YulBlock","src":"6231:193:5","statements":[{"nodeType":"YulAssignment","src":"6241:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6253:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"6264:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6249:3:5"},"nodeType":"YulFunctionCall","src":"6249:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6241:4:5"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6288:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"6299:1:5","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6284:3:5"},"nodeType":"YulFunctionCall","src":"6284:17:5"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"6307:4:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"6313:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6303:3:5"},"nodeType":"YulFunctionCall","src":"6303:20:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6277:6:5"},"nodeType":"YulFunctionCall","src":"6277:47:5"},"nodeType":"YulExpressionStatement","src":"6277:47:5"},{"nodeType":"YulAssignment","src":"6333:84:5","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6403:6:5"},{"name":"tail","nodeType":"YulIdentifier","src":"6412:4:5"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"6341:61:5"},"nodeType":"YulFunctionCall","src":"6341:76:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6333:4:5"}]}]},"name":"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6203:9:5","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6215:6:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6226:4:5","type":""}],"src":"6115:309:5"},{"body":{"nodeType":"YulBlock","src":"6543:152:5","statements":[{"body":{"nodeType":"YulBlock","src":"6582:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d","nodeType":"YulIdentifier","src":"6584:77:5"},"nodeType":"YulFunctionCall","src":"6584:79:5"},"nodeType":"YulExpressionStatement","src":"6584:79:5"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"6564:3:5"},{"name":"offset","nodeType":"YulIdentifier","src":"6569:6:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6560:3:5"},"nodeType":"YulFunctionCall","src":"6560:16:5"},{"kind":"number","nodeType":"YulLiteral","src":"6578:2:5","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6556:3:5"},"nodeType":"YulFunctionCall","src":"6556:25:5"},"nodeType":"YulIf","src":"6553:112:5"},{"nodeType":"YulAssignment","src":"6674:15:5","value":{"name":"offset","nodeType":"YulIdentifier","src":"6683:6:5"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"6674:5:5"}]}]},"name":"abi_decode_t_struct$_SafeRootAccess_$37_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6521:6:5","type":""},{"name":"end","nodeType":"YulTypedName","src":"6529:3:5","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"6537:5:5","type":""}],"src":"6459:236:5"},{"body":{"nodeType":"YulBlock","src":"6881:1031:5","statements":[{"body":{"nodeType":"YulBlock","src":"6928:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6930:77:5"},"nodeType":"YulFunctionCall","src":"6930:79:5"},"nodeType":"YulExpressionStatement","src":"6930:79:5"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6902:7:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"6911:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6898:3:5"},"nodeType":"YulFunctionCall","src":"6898:23:5"},{"kind":"number","nodeType":"YulLiteral","src":"6923:3:5","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6894:3:5"},"nodeType":"YulFunctionCall","src":"6894:33:5"},"nodeType":"YulIf","src":"6891:120:5"},{"nodeType":"YulBlock","src":"7021:129:5","statements":[{"nodeType":"YulVariableDeclaration","src":"7036:15:5","value":{"kind":"number","nodeType":"YulLiteral","src":"7050:1:5","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7040:6:5","type":""}]},{"nodeType":"YulAssignment","src":"7065:75:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7112:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"7123:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7108:3:5"},"nodeType":"YulFunctionCall","src":"7108:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7132:7:5"}],"functionName":{"name":"abi_decode_t_contract$_ISafe_$69","nodeType":"YulIdentifier","src":"7075:32:5"},"nodeType":"YulFunctionCall","src":"7075:65:5"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7065:6:5"}]}]},{"nodeType":"YulBlock","src":"7160:310:5","statements":[{"nodeType":"YulVariableDeclaration","src":"7175:46:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7206:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"7217:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7202:3:5"},"nodeType":"YulFunctionCall","src":"7202:18:5"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7189:12:5"},"nodeType":"YulFunctionCall","src":"7189:32:5"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7179:6:5","type":""}]},{"body":{"nodeType":"YulBlock","src":"7268:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"7270:77:5"},"nodeType":"YulFunctionCall","src":"7270:79:5"},"nodeType":"YulExpressionStatement","src":"7270:79:5"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7240:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"7248:18:5","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7237:2:5"},"nodeType":"YulFunctionCall","src":"7237:30:5"},"nodeType":"YulIf","src":"7234:117:5"},{"nodeType":"YulAssignment","src":"7365:95:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7432:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"7443:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7428:3:5"},"nodeType":"YulFunctionCall","src":"7428:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7452:7:5"}],"functionName":{"name":"abi_decode_t_struct$_SafeRootAccess_$37_calldata_ptr","nodeType":"YulIdentifier","src":"7375:52:5"},"nodeType":"YulFunctionCall","src":"7375:85:5"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7365:6:5"}]}]},{"nodeType":"YulBlock","src":"7480:118:5","statements":[{"nodeType":"YulVariableDeclaration","src":"7495:16:5","value":{"kind":"number","nodeType":"YulLiteral","src":"7509:2:5","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7499:6:5","type":""}]},{"nodeType":"YulAssignment","src":"7525:63:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7560:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"7571:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7556:3:5"},"nodeType":"YulFunctionCall","src":"7556:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7580:7:5"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"7535:20:5"},"nodeType":"YulFunctionCall","src":"7535:53:5"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7525:6:5"}]}]},{"nodeType":"YulBlock","src":"7608:297:5","statements":[{"nodeType":"YulVariableDeclaration","src":"7623:46:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7654:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"7665:2:5","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7650:3:5"},"nodeType":"YulFunctionCall","src":"7650:18:5"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7637:12:5"},"nodeType":"YulFunctionCall","src":"7637:32:5"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7627:6:5","type":""}]},{"body":{"nodeType":"YulBlock","src":"7716:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"7718:77:5"},"nodeType":"YulFunctionCall","src":"7718:79:5"},"nodeType":"YulExpressionStatement","src":"7718:79:5"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7688:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"7696:18:5","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7685:2:5"},"nodeType":"YulFunctionCall","src":"7685:30:5"},"nodeType":"YulIf","src":"7682:117:5"},{"nodeType":"YulAssignment","src":"7813:82:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7867:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"7878:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7863:3:5"},"nodeType":"YulFunctionCall","src":"7863:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7887:7:5"}],"functionName":{"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulIdentifier","src":"7831:31:5"},"nodeType":"YulFunctionCall","src":"7831:64:5"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"7813:6:5"},{"name":"value4","nodeType":"YulIdentifier","src":"7821:6:5"}]}]}]},"name":"abi_decode_tuple_t_contract$_ISafe_$69t_struct$_SafeRootAccess_$37_calldata_ptrt_uint256t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6819:9:5","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6830:7:5","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6842:6:5","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6850:6:5","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6858:6:5","type":""},{"name":"value3","nodeType":"YulTypedName","src":"6866:6:5","type":""},{"name":"value4","nodeType":"YulTypedName","src":"6874:6:5","type":""}],"src":"6701:1211:5"},{"body":{"nodeType":"YulBlock","src":"7958:76:5","statements":[{"body":{"nodeType":"YulBlock","src":"8012:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8021:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8024:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8014:6:5"},"nodeType":"YulFunctionCall","src":"8014:12:5"},"nodeType":"YulExpressionStatement","src":"8014:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7981:5:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8003:5:5"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"7988:14:5"},"nodeType":"YulFunctionCall","src":"7988:21:5"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7978:2:5"},"nodeType":"YulFunctionCall","src":"7978:32:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7971:6:5"},"nodeType":"YulFunctionCall","src":"7971:40:5"},"nodeType":"YulIf","src":"7968:60:5"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7951:5:5","type":""}],"src":"7918:116:5"},{"body":{"nodeType":"YulBlock","src":"8089:84:5","statements":[{"nodeType":"YulAssignment","src":"8099:29:5","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8121:6:5"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8108:12:5"},"nodeType":"YulFunctionCall","src":"8108:20:5"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"8099:5:5"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8161:5:5"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"8137:23:5"},"nodeType":"YulFunctionCall","src":"8137:30:5"},"nodeType":"YulExpressionStatement","src":"8137:30:5"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8067:6:5","type":""},{"name":"end","nodeType":"YulTypedName","src":"8075:3:5","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"8083:5:5","type":""}],"src":"8040:133:5"},{"body":{"nodeType":"YulBlock","src":"8307:707:5","statements":[{"body":{"nodeType":"YulBlock","src":"8353:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"8355:77:5"},"nodeType":"YulFunctionCall","src":"8355:79:5"},"nodeType":"YulExpressionStatement","src":"8355:79:5"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8328:7:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"8337:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8324:3:5"},"nodeType":"YulFunctionCall","src":"8324:23:5"},{"kind":"number","nodeType":"YulLiteral","src":"8349:2:5","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8320:3:5"},"nodeType":"YulFunctionCall","src":"8320:32:5"},"nodeType":"YulIf","src":"8317:119:5"},{"nodeType":"YulBlock","src":"8446:129:5","statements":[{"nodeType":"YulVariableDeclaration","src":"8461:15:5","value":{"kind":"number","nodeType":"YulLiteral","src":"8475:1:5","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8465:6:5","type":""}]},{"nodeType":"YulAssignment","src":"8490:75:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8537:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"8548:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8533:3:5"},"nodeType":"YulFunctionCall","src":"8533:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8557:7:5"}],"functionName":{"name":"abi_decode_t_contract$_ISafe_$69","nodeType":"YulIdentifier","src":"8500:32:5"},"nodeType":"YulFunctionCall","src":"8500:65:5"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8490:6:5"}]}]},{"nodeType":"YulBlock","src":"8585:115:5","statements":[{"nodeType":"YulVariableDeclaration","src":"8600:16:5","value":{"kind":"number","nodeType":"YulLiteral","src":"8614:2:5","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8604:6:5","type":""}]},{"nodeType":"YulAssignment","src":"8630:60:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8662:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"8673:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8658:3:5"},"nodeType":"YulFunctionCall","src":"8658:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8682:7:5"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"8640:17:5"},"nodeType":"YulFunctionCall","src":"8640:50:5"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8630:6:5"}]}]},{"nodeType":"YulBlock","src":"8710:297:5","statements":[{"nodeType":"YulVariableDeclaration","src":"8725:46:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8756:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"8767:2:5","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8752:3:5"},"nodeType":"YulFunctionCall","src":"8752:18:5"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8739:12:5"},"nodeType":"YulFunctionCall","src":"8739:32:5"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8729:6:5","type":""}]},{"body":{"nodeType":"YulBlock","src":"8818:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"8820:77:5"},"nodeType":"YulFunctionCall","src":"8820:79:5"},"nodeType":"YulExpressionStatement","src":"8820:79:5"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8790:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"8798:18:5","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8787:2:5"},"nodeType":"YulFunctionCall","src":"8787:30:5"},"nodeType":"YulIf","src":"8784:117:5"},{"nodeType":"YulAssignment","src":"8915:82:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8969:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"8980:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8965:3:5"},"nodeType":"YulFunctionCall","src":"8965:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8989:7:5"}],"functionName":{"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulIdentifier","src":"8933:31:5"},"nodeType":"YulFunctionCall","src":"8933:64:5"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"8915:6:5"},{"name":"value3","nodeType":"YulIdentifier","src":"8923:6:5"}]}]}]},"name":"abi_decode_tuple_t_contract$_ISafe_$69t_boolt_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8253:9:5","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8264:7:5","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8276:6:5","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8284:6:5","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8292:6:5","type":""},{"name":"value3","nodeType":"YulTypedName","src":"8300:6:5","type":""}],"src":"8179:835:5"},{"body":{"nodeType":"YulBlock","src":"9085:53:5","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9102:3:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9125:5:5"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"9107:17:5"},"nodeType":"YulFunctionCall","src":"9107:24:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9095:6:5"},"nodeType":"YulFunctionCall","src":"9095:37:5"},"nodeType":"YulExpressionStatement","src":"9095:37:5"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9073:5:5","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9080:3:5","type":""}],"src":"9020:118:5"},{"body":{"nodeType":"YulBlock","src":"9209:53:5","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9226:3:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9249:5:5"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"9231:17:5"},"nodeType":"YulFunctionCall","src":"9231:24:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9219:6:5"},"nodeType":"YulFunctionCall","src":"9219:37:5"},"nodeType":"YulExpressionStatement","src":"9219:37:5"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9197:5:5","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9204:3:5","type":""}],"src":"9144:118:5"},{"body":{"nodeType":"YulBlock","src":"9332:82:5","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"9355:3:5"},{"name":"src","nodeType":"YulIdentifier","src":"9360:3:5"},{"name":"length","nodeType":"YulIdentifier","src":"9365:6:5"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"9342:12:5"},"nodeType":"YulFunctionCall","src":"9342:30:5"},"nodeType":"YulExpressionStatement","src":"9342:30:5"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"9392:3:5"},{"name":"length","nodeType":"YulIdentifier","src":"9397:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9388:3:5"},"nodeType":"YulFunctionCall","src":"9388:16:5"},{"kind":"number","nodeType":"YulLiteral","src":"9406:1:5","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9381:6:5"},"nodeType":"YulFunctionCall","src":"9381:27:5"},"nodeType":"YulExpressionStatement","src":"9381:27:5"}]},"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"9314:3:5","type":""},{"name":"dst","nodeType":"YulTypedName","src":"9319:3:5","type":""},{"name":"length","nodeType":"YulTypedName","src":"9324:6:5","type":""}],"src":"9268:146:5"},{"body":{"nodeType":"YulBlock","src":"9542:214:5","statements":[{"nodeType":"YulAssignment","src":"9552:77:5","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9617:3:5"},{"name":"length","nodeType":"YulIdentifier","src":"9622:6:5"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9559:57:5"},"nodeType":"YulFunctionCall","src":"9559:70:5"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9552:3:5"}]},{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"9676:5:5"},{"name":"pos","nodeType":"YulIdentifier","src":"9683:3:5"},{"name":"length","nodeType":"YulIdentifier","src":"9688:6:5"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"9639:36:5"},"nodeType":"YulFunctionCall","src":"9639:56:5"},"nodeType":"YulExpressionStatement","src":"9639:56:5"},{"nodeType":"YulAssignment","src":"9704:46:5","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9715:3:5"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9742:6:5"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"9720:21:5"},"nodeType":"YulFunctionCall","src":"9720:29:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9711:3:5"},"nodeType":"YulFunctionCall","src":"9711:39:5"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9704:3:5"}]}]},"name":"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"9515:5:5","type":""},{"name":"length","nodeType":"YulTypedName","src":"9522:6:5","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9530:3:5","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9538:3:5","type":""}],"src":"9442:314:5"},{"body":{"nodeType":"YulBlock","src":"9944:367:5","statements":[{"nodeType":"YulAssignment","src":"9954:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9966:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"9977:2:5","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9962:3:5"},"nodeType":"YulFunctionCall","src":"9962:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9954:4:5"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10034:6:5"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10047:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"10058:1:5","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10043:3:5"},"nodeType":"YulFunctionCall","src":"10043:17:5"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"9990:43:5"},"nodeType":"YulFunctionCall","src":"9990:71:5"},"nodeType":"YulExpressionStatement","src":"9990:71:5"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"10115:6:5"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10128:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"10139:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10124:3:5"},"nodeType":"YulFunctionCall","src":"10124:18:5"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"10071:43:5"},"nodeType":"YulFunctionCall","src":"10071:72:5"},"nodeType":"YulExpressionStatement","src":"10071:72:5"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10164:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"10175:2:5","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10160:3:5"},"nodeType":"YulFunctionCall","src":"10160:18:5"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10184:4:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"10190:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10180:3:5"},"nodeType":"YulFunctionCall","src":"10180:20:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10153:6:5"},"nodeType":"YulFunctionCall","src":"10153:48:5"},"nodeType":"YulExpressionStatement","src":"10153:48:5"},{"nodeType":"YulAssignment","src":"10210:94:5","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"10282:6:5"},{"name":"value3","nodeType":"YulIdentifier","src":"10290:6:5"},{"name":"tail","nodeType":"YulIdentifier","src":"10299:4:5"}],"functionName":{"name":"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10218:63:5"},"nodeType":"YulFunctionCall","src":"10218:86:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10210:4:5"}]}]},"name":"abi_encode_tuple_t_address_t_uint256_t_bytes_calldata_ptr__to_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9892:9:5","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9904:6:5","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9912:6:5","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9920:6:5","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9928:6:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9939:4:5","type":""}],"src":"9762:549:5"},{"body":{"nodeType":"YulBlock","src":"10493:361:5","statements":[{"nodeType":"YulAssignment","src":"10503:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10515:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"10526:2:5","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10511:3:5"},"nodeType":"YulFunctionCall","src":"10511:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10503:4:5"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10583:6:5"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10596:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"10607:1:5","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10592:3:5"},"nodeType":"YulFunctionCall","src":"10592:17:5"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"10539:43:5"},"nodeType":"YulFunctionCall","src":"10539:71:5"},"nodeType":"YulExpressionStatement","src":"10539:71:5"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"10658:6:5"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10671:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"10682:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10667:3:5"},"nodeType":"YulFunctionCall","src":"10667:18:5"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"10620:37:5"},"nodeType":"YulFunctionCall","src":"10620:66:5"},"nodeType":"YulExpressionStatement","src":"10620:66:5"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10707:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"10718:2:5","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10703:3:5"},"nodeType":"YulFunctionCall","src":"10703:18:5"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10727:4:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"10733:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10723:3:5"},"nodeType":"YulFunctionCall","src":"10723:20:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10696:6:5"},"nodeType":"YulFunctionCall","src":"10696:48:5"},"nodeType":"YulExpressionStatement","src":"10696:48:5"},{"nodeType":"YulAssignment","src":"10753:94:5","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"10825:6:5"},{"name":"value3","nodeType":"YulIdentifier","src":"10833:6:5"},{"name":"tail","nodeType":"YulIdentifier","src":"10842:4:5"}],"functionName":{"name":"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10761:63:5"},"nodeType":"YulFunctionCall","src":"10761:86:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10753:4:5"}]}]},"name":"abi_encode_tuple_t_address_t_bool_t_bytes_calldata_ptr__to_t_address_t_bool_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10441:9:5","type":""},{"name":"value3","nodeType":"YulTypedName","src":"10453:6:5","type":""},{"name":"value2","nodeType":"YulTypedName","src":"10461:6:5","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10469:6:5","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10477:6:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10488:4:5","type":""}],"src":"10317:537:5"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_contract$_ISafe_$69(value) -> cleaned {\n        cleaned := cleanup_t_address(value)\n    }\n\n    function validator_revert_t_contract$_ISafe_$69(value) {\n        if iszero(eq(value, cleanup_t_contract$_ISafe_$69(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_contract$_ISafe_$69(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_contract$_ISafe_$69(value)\n    }\n\n    function revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d() {\n        revert(0, 0)\n    }\n\n    // struct SafeTransaction\n    function abi_decode_t_struct$_SafeTransaction_$29_calldata_ptr(offset, end) -> value {\n        if slt(sub(end, offset), 96) { revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d() }\n        value := offset\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() {\n        revert(0, 0)\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x01)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function abi_decode_tuple_t_contract$_ISafe_$69t_struct$_SafeTransaction_$29_calldata_ptrt_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_contract$_ISafe_$69(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_struct$_SafeTransaction_$29_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3, value4 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    // struct SafeRootAccess\n    function abi_decode_t_struct$_SafeRootAccess_$37_calldata_ptr(offset, end) -> value {\n        if slt(sub(end, offset), 96) { revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d() }\n        value := offset\n    }\n\n    function abi_decode_tuple_t_contract$_ISafe_$69t_struct$_SafeRootAccess_$37_calldata_ptrt_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_contract$_ISafe_$69(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_struct$_SafeRootAccess_$37_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3, value4 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_contract$_ISafe_$69t_boolt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_contract$_ISafe_$69(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2, value3 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    // bytes -> bytes\n    function abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack(start, length, pos) -> end {\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n\n        copy_calldata_to_memory_with_cleanup(start, pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_bytes_calldata_ptr__to_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        mstore(add(headStart, 64), sub(tail, headStart))\n        tail := abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack(value2, value3,  tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_bool_t_bytes_calldata_ptr__to_t_address_t_bool_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bool_to_t_bool_fromStack(value1,  add(headStart, 32))\n\n        mstore(add(headStart, 64), sub(tail, headStart))\n        tail := abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack(value2, value3,  tail)\n\n    }\n\n}\n","id":5,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061004c5760003560e01c806301ffc9a714610051578063176ae7b7146100815780637359b742146100b1578063f44d4ca3146100e1575b600080fd5b61006b6004803603810190610066919061023d565b6100fd565b6040516100789190610285565b60405180910390f35b61009b600480360381019061009691906103cf565b610108565b6040516100a89190610503565b60405180910390f35b6100cb60048036038101906100c69190610544565b610150565b6040516100d89190610503565b60405180910390f35b6100fb60048036038101906100f69190610614565b610198565b005b600060019050919050565b60607fba141d1e6792303b9e9126885cd31f5e91dc6b15836c7214f821b163a069cbf43385858560405161013f94939291906106e2565b60405180910390a195945050505050565b60607f3256a4f1a2ba63603d140a241b17453003a8c7458eb8264328d35f440d5d392a3385858560405161018794939291906106e2565b60405180910390a195945050505050565b7f56fe939208d9884dede3b0a4f4168be3c4f445b3280bda9682397aaac12e06b2338484846040516101cd9493929190610722565b60405180910390a150505050565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61021a816101e5565b811461022557600080fd5b50565b60008135905061023781610211565b92915050565b600060208284031215610253576102526101db565b5b600061026184828501610228565b91505092915050565b60008115159050919050565b61027f8161026a565b82525050565b600060208201905061029a6000830184610276565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102cb826102a0565b9050919050565b60006102dd826102c0565b9050919050565b6102ed816102d2565b81146102f857600080fd5b50565b60008135905061030a816102e4565b92915050565b600080fd5b60006060828403121561032b5761032a610310565b5b81905092915050565b6000819050919050565b61034781610334565b811461035257600080fd5b50565b6000813590506103648161033e565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261038f5761038e61036a565b5b8235905067ffffffffffffffff8111156103ac576103ab61036f565b5b6020830191508360018202830111156103c8576103c7610374565b5b9250929050565b6000806000806000608086880312156103eb576103ea6101db565b5b60006103f9888289016102fb565b955050602086013567ffffffffffffffff81111561041a576104196101e0565b5b61042688828901610315565b945050604061043788828901610355565b935050606086013567ffffffffffffffff811115610458576104576101e0565b5b61046488828901610379565b92509250509295509295909350565b600081519050919050565b600082825260208201905092915050565b60005b838110156104ad578082015181840152602081019050610492565b60008484015250505050565b6000601f19601f8301169050919050565b60006104d582610473565b6104df818561047e565b93506104ef81856020860161048f565b6104f8816104b9565b840191505092915050565b6000602082019050818103600083015261051d81846104ca565b905092915050565b60006060828403121561053b5761053a610310565b5b81905092915050565b6000806000806000608086880312156105605761055f6101db565b5b600061056e888289016102fb565b955050602086013567ffffffffffffffff81111561058f5761058e6101e0565b5b61059b88828901610525565b94505060406105ac88828901610355565b935050606086013567ffffffffffffffff8111156105cd576105cc6101e0565b5b6105d988828901610379565b92509250509295509295909350565b6105f18161026a565b81146105fc57600080fd5b50565b60008135905061060e816105e8565b92915050565b6000806000806060858703121561062e5761062d6101db565b5b600061063c878288016102fb565b945050602061064d878288016105ff565b935050604085013567ffffffffffffffff81111561066e5761066d6101e0565b5b61067a87828801610379565b925092505092959194509250565b610691816102c0565b82525050565b6106a081610334565b82525050565b82818337600083830152505050565b60006106c1838561047e565b93506106ce8385846106a6565b6106d7836104b9565b840190509392505050565b60006060820190506106f76000830187610688565b6107046020830186610697565b81810360408301526107178184866106b5565b905095945050505050565b60006060820190506107376000830187610688565b6107446020830186610276565b81810360408301526107578184866106b5565b90509594505050505056fea2646970667358221220927463f30623ab2e620ab1f9acdc8c5ac39d1f2a51e65a1f01e66681bc6a0f4764736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x176AE7B7 EQ PUSH2 0x81 JUMPI DUP1 PUSH4 0x7359B742 EQ PUSH2 0xB1 JUMPI DUP1 PUSH4 0xF44D4CA3 EQ PUSH2 0xE1 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x66 SWAP2 SWAP1 PUSH2 0x23D JUMP JUMPDEST PUSH2 0xFD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x78 SWAP2 SWAP1 PUSH2 0x285 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x9B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x96 SWAP2 SWAP1 PUSH2 0x3CF JUMP JUMPDEST PUSH2 0x108 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA8 SWAP2 SWAP1 PUSH2 0x503 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xCB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xC6 SWAP2 SWAP1 PUSH2 0x544 JUMP JUMPDEST PUSH2 0x150 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD8 SWAP2 SWAP1 PUSH2 0x503 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xF6 SWAP2 SWAP1 PUSH2 0x614 JUMP JUMPDEST PUSH2 0x198 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0xBA141D1E6792303B9E9126885CD31F5E91DC6B15836C7214F821B163A069CBF4 CALLER DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x13F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0x3256A4F1A2BA63603D140A241B17453003A8C7458EB8264328D35F440D5D392A CALLER DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x187 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x56FE939208D9884DEDE3B0A4F4168BE3C4F445B3280BDA9682397AAAC12E06B2 CALLER DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x722 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x21A DUP2 PUSH2 0x1E5 JUMP JUMPDEST DUP2 EQ PUSH2 0x225 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x237 DUP2 PUSH2 0x211 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x253 JUMPI PUSH2 0x252 PUSH2 0x1DB JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x261 DUP5 DUP3 DUP6 ADD PUSH2 0x228 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x27F DUP2 PUSH2 0x26A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x29A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x276 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CB DUP3 PUSH2 0x2A0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DD DUP3 PUSH2 0x2C0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2ED DUP2 PUSH2 0x2D2 JUMP JUMPDEST DUP2 EQ PUSH2 0x2F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x30A DUP2 PUSH2 0x2E4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x32B JUMPI PUSH2 0x32A PUSH2 0x310 JUMP JUMPDEST JUMPDEST DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x347 DUP2 PUSH2 0x334 JUMP JUMPDEST DUP2 EQ PUSH2 0x352 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x364 DUP2 PUSH2 0x33E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x38F JUMPI PUSH2 0x38E PUSH2 0x36A JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3AC JUMPI PUSH2 0x3AB PUSH2 0x36F JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x3C8 JUMPI PUSH2 0x3C7 PUSH2 0x374 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3EB JUMPI PUSH2 0x3EA PUSH2 0x1DB JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3F9 DUP9 DUP3 DUP10 ADD PUSH2 0x2FB JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x41A JUMPI PUSH2 0x419 PUSH2 0x1E0 JUMP JUMPDEST JUMPDEST PUSH2 0x426 DUP9 DUP3 DUP10 ADD PUSH2 0x315 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x437 DUP9 DUP3 DUP10 ADD PUSH2 0x355 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x458 JUMPI PUSH2 0x457 PUSH2 0x1E0 JUMP JUMPDEST JUMPDEST PUSH2 0x464 DUP9 DUP3 DUP10 ADD PUSH2 0x379 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4AD JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x492 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4D5 DUP3 PUSH2 0x473 JUMP JUMPDEST PUSH2 0x4DF DUP2 DUP6 PUSH2 0x47E JUMP JUMPDEST SWAP4 POP PUSH2 0x4EF DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x48F JUMP JUMPDEST PUSH2 0x4F8 DUP2 PUSH2 0x4B9 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x51D DUP2 DUP5 PUSH2 0x4CA JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x53B JUMPI PUSH2 0x53A PUSH2 0x310 JUMP JUMPDEST JUMPDEST DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x560 JUMPI PUSH2 0x55F PUSH2 0x1DB JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x56E DUP9 DUP3 DUP10 ADD PUSH2 0x2FB JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x58F JUMPI PUSH2 0x58E PUSH2 0x1E0 JUMP JUMPDEST JUMPDEST PUSH2 0x59B DUP9 DUP3 DUP10 ADD PUSH2 0x525 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x5AC DUP9 DUP3 DUP10 ADD PUSH2 0x355 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x5CD JUMPI PUSH2 0x5CC PUSH2 0x1E0 JUMP JUMPDEST JUMPDEST PUSH2 0x5D9 DUP9 DUP3 DUP10 ADD PUSH2 0x379 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH2 0x5F1 DUP2 PUSH2 0x26A JUMP JUMPDEST DUP2 EQ PUSH2 0x5FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x60E DUP2 PUSH2 0x5E8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x62E JUMPI PUSH2 0x62D PUSH2 0x1DB JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x63C DUP8 DUP3 DUP9 ADD PUSH2 0x2FB JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x64D DUP8 DUP3 DUP9 ADD PUSH2 0x5FF JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x66E JUMPI PUSH2 0x66D PUSH2 0x1E0 JUMP JUMPDEST JUMPDEST PUSH2 0x67A DUP8 DUP3 DUP9 ADD PUSH2 0x379 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH2 0x691 DUP2 PUSH2 0x2C0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x6A0 DUP2 PUSH2 0x334 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6C1 DUP4 DUP6 PUSH2 0x47E JUMP JUMPDEST SWAP4 POP PUSH2 0x6CE DUP4 DUP6 DUP5 PUSH2 0x6A6 JUMP JUMPDEST PUSH2 0x6D7 DUP4 PUSH2 0x4B9 JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x6F7 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x688 JUMP JUMPDEST PUSH2 0x704 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x697 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x717 DUP2 DUP5 DUP7 PUSH2 0x6B5 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x737 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x688 JUMP JUMPDEST PUSH2 0x744 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x276 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x757 DUP2 DUP5 DUP7 PUSH2 0x6B5 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP3 PUSH21 0x63F30623AB2E620AB1F9ACDC8C5AC39D1F2A51E65A 0x1F ADD 0xE6 PUSH7 0x81BC6A0F476473 PUSH16 0x6C634300081200330000000000000000 ","sourceMap":"373:2649:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2916:104;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1191:273;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1963:300;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2755:155;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2916:104;2986:4;3009;3002:11;;2916:104;;;:::o;1191:273::-;1359:25;1401:56;1416:10;1428:13;1443;;1401:56;;;;;;;;;:::i;:::-;;;;;;;;1191:273;;;;;;;:::o;1963:300::-;2148:25;2190:66;2215:10;2227:13;2242;;2190:66;;;;;;;;;:::i;:::-;;;;;;;;1963:300;;;;;;;:::o;2755:155::-;2853:50;2869:10;2881:7;2890:12;;2853:50;;;;;;;;;:::i;:::-;;;;;;;;2755:155;;;;:::o;88:117:5:-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:126::-;1555:7;1595:42;1588:5;1584:54;1573:65;;1518:126;;;:::o;1650:96::-;1687:7;1716:24;1734:5;1716:24;:::i;:::-;1705:35;;1650:96;;;:::o;1752:108::-;1801:7;1830:24;1848:5;1830:24;:::i;:::-;1819:35;;1752:108;;;:::o;1866:146::-;1951:36;1981:5;1951:36;:::i;:::-;1944:5;1941:47;1931:75;;2002:1;1999;1992:12;1931:75;1866:146;:::o;2018:163::-;2076:5;2114:6;2101:20;2092:29;;2130:45;2169:5;2130:45;:::i;:::-;2018:163;;;;:::o;2187:117::-;2296:1;2293;2286:12;2340:237;2419:5;2460:2;2451:6;2446:3;2442:16;2438:25;2435:112;;;2466:79;;:::i;:::-;2435:112;2565:6;2556:15;;2340:237;;;;:::o;2583:77::-;2620:7;2649:5;2638:16;;2583:77;;;:::o;2666:122::-;2739:24;2757:5;2739:24;:::i;:::-;2732:5;2729:35;2719:63;;2778:1;2775;2768:12;2719:63;2666:122;:::o;2794:139::-;2840:5;2878:6;2865:20;2856:29;;2894:33;2921:5;2894:33;:::i;:::-;2794:139;;;;:::o;2939:117::-;3048:1;3045;3038:12;3062:117;3171:1;3168;3161:12;3185:117;3294:1;3291;3284:12;3321:552;3378:8;3388:6;3438:3;3431:4;3423:6;3419:17;3415:27;3405:122;;3446:79;;:::i;:::-;3405:122;3559:6;3546:20;3536:30;;3589:18;3581:6;3578:30;3575:117;;;3611:79;;:::i;:::-;3575:117;3725:4;3717:6;3713:17;3701:29;;3779:3;3771:4;3763:6;3759:17;3749:8;3745:32;3742:41;3739:128;;;3786:79;;:::i;:::-;3739:128;3321:552;;;;;:::o;3879:1213::-;4021:6;4029;4037;4045;4053;4102:3;4090:9;4081:7;4077:23;4073:33;4070:120;;;4109:79;;:::i;:::-;4070:120;4229:1;4254:65;4311:7;4302:6;4291:9;4287:22;4254:65;:::i;:::-;4244:75;;4200:129;4396:2;4385:9;4381:18;4368:32;4427:18;4419:6;4416:30;4413:117;;;4449:79;;:::i;:::-;4413:117;4554:86;4632:7;4623:6;4612:9;4608:22;4554:86;:::i;:::-;4544:96;;4339:311;4689:2;4715:53;4760:7;4751:6;4740:9;4736:22;4715:53;:::i;:::-;4705:63;;4660:118;4845:2;4834:9;4830:18;4817:32;4876:18;4868:6;4865:30;4862:117;;;4898:79;;:::i;:::-;4862:117;5011:64;5067:7;5058:6;5047:9;5043:22;5011:64;:::i;:::-;4993:82;;;;4788:297;3879:1213;;;;;;;;:::o;5098:98::-;5149:6;5183:5;5177:12;5167:22;;5098:98;;;:::o;5202:168::-;5285:11;5319:6;5314:3;5307:19;5359:4;5354:3;5350:14;5335:29;;5202:168;;;;:::o;5376:246::-;5457:1;5467:113;5481:6;5478:1;5475:13;5467:113;;;5566:1;5561:3;5557:11;5551:18;5547:1;5542:3;5538:11;5531:39;5503:2;5500:1;5496:10;5491:15;;5467:113;;;5614:1;5605:6;5600:3;5596:16;5589:27;5438:184;5376:246;;;:::o;5628:102::-;5669:6;5720:2;5716:7;5711:2;5704:5;5700:14;5696:28;5686:38;;5628:102;;;:::o;5736:373::-;5822:3;5850:38;5882:5;5850:38;:::i;:::-;5904:70;5967:6;5962:3;5904:70;:::i;:::-;5897:77;;5983:65;6041:6;6036:3;6029:4;6022:5;6018:16;5983:65;:::i;:::-;6073:29;6095:6;6073:29;:::i;:::-;6068:3;6064:39;6057:46;;5826:283;5736:373;;;;:::o;6115:309::-;6226:4;6264:2;6253:9;6249:18;6241:26;;6313:9;6307:4;6303:20;6299:1;6288:9;6284:17;6277:47;6341:76;6412:4;6403:6;6341:76;:::i;:::-;6333:84;;6115:309;;;;:::o;6459:236::-;6537:5;6578:2;6569:6;6564:3;6560:16;6556:25;6553:112;;;6584:79;;:::i;:::-;6553:112;6683:6;6674:15;;6459:236;;;;:::o;6701:1211::-;6842:6;6850;6858;6866;6874;6923:3;6911:9;6902:7;6898:23;6894:33;6891:120;;;6930:79;;:::i;:::-;6891:120;7050:1;7075:65;7132:7;7123:6;7112:9;7108:22;7075:65;:::i;:::-;7065:75;;7021:129;7217:2;7206:9;7202:18;7189:32;7248:18;7240:6;7237:30;7234:117;;;7270:79;;:::i;:::-;7234:117;7375:85;7452:7;7443:6;7432:9;7428:22;7375:85;:::i;:::-;7365:95;;7160:310;7509:2;7535:53;7580:7;7571:6;7560:9;7556:22;7535:53;:::i;:::-;7525:63;;7480:118;7665:2;7654:9;7650:18;7637:32;7696:18;7688:6;7685:30;7682:117;;;7718:79;;:::i;:::-;7682:117;7831:64;7887:7;7878:6;7867:9;7863:22;7831:64;:::i;:::-;7813:82;;;;7608:297;6701:1211;;;;;;;;:::o;7918:116::-;7988:21;8003:5;7988:21;:::i;:::-;7981:5;7978:32;7968:60;;8024:1;8021;8014:12;7968:60;7918:116;:::o;8040:133::-;8083:5;8121:6;8108:20;8099:29;;8137:30;8161:5;8137:30;:::i;:::-;8040:133;;;;:::o;8179:835::-;8276:6;8284;8292;8300;8349:2;8337:9;8328:7;8324:23;8320:32;8317:119;;;8355:79;;:::i;:::-;8317:119;8475:1;8500:65;8557:7;8548:6;8537:9;8533:22;8500:65;:::i;:::-;8490:75;;8446:129;8614:2;8640:50;8682:7;8673:6;8662:9;8658:22;8640:50;:::i;:::-;8630:60;;8585:115;8767:2;8756:9;8752:18;8739:32;8798:18;8790:6;8787:30;8784:117;;;8820:79;;:::i;:::-;8784:117;8933:64;8989:7;8980:6;8969:9;8965:22;8933:64;:::i;:::-;8915:82;;;;8710:297;8179:835;;;;;;;:::o;9020:118::-;9107:24;9125:5;9107:24;:::i;:::-;9102:3;9095:37;9020:118;;:::o;9144:::-;9231:24;9249:5;9231:24;:::i;:::-;9226:3;9219:37;9144:118;;:::o;9268:146::-;9365:6;9360:3;9355;9342:30;9406:1;9397:6;9392:3;9388:16;9381:27;9268:146;;;:::o;9442:314::-;9538:3;9559:70;9622:6;9617:3;9559:70;:::i;:::-;9552:77;;9639:56;9688:6;9683:3;9676:5;9639:56;:::i;:::-;9720:29;9742:6;9720:29;:::i;:::-;9715:3;9711:39;9704:46;;9442:314;;;;;:::o;9762:549::-;9939:4;9977:2;9966:9;9962:18;9954:26;;9990:71;10058:1;10047:9;10043:17;10034:6;9990:71;:::i;:::-;10071:72;10139:2;10128:9;10124:18;10115:6;10071:72;:::i;:::-;10190:9;10184:4;10180:20;10175:2;10164:9;10160:18;10153:48;10218:86;10299:4;10290:6;10282;10218:86;:::i;:::-;10210:94;;9762:549;;;;;;;:::o;10317:537::-;10488:4;10526:2;10515:9;10511:18;10503:26;;10539:71;10607:1;10596:9;10592:17;10583:6;10539:71;:::i;:::-;10620:66;10682:2;10671:9;10667:18;10658:6;10620:66;:::i;:::-;10733:9;10727:4;10723:20;10718:2;10707:9;10703:18;10696:48;10761:86;10842:4;10833:6;10825;10761:86;:::i;:::-;10753:94;;10317:537;;;;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"388800","executionCost":"424","totalCost":"389224"},"external":{"postCheck(address,bool,bytes)":"infinite","preCheck(address,((address,uint256,bytes)[],uint256,bytes32),uint256,bytes)":"infinite","preCheckRootAccess(address,((address,uint256,bytes),uint256,bytes32),uint256,bytes)":"infinite","supportsInterface(bytes4)":"592"}},"methodIdentifiers":{"postCheck(address,bool,bytes)":"f44d4ca3","preCheck(address,((address,uint256,bytes)[],uint256,bytes32),uint256,bytes)":"176ae7b7","preCheckRootAccess(address,((address,uint256,bytes),uint256,bytes32),uint256,bytes)":"7359b742","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"preCheckData\",\"type\":\"bytes\"}],\"name\":\"PostCheckCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"executionMeta\",\"type\":\"bytes\"}],\"name\":\"PreCheckCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"executionMeta\",\"type\":\"bytes\"}],\"name\":\"PreCheckRootAccessCalled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract ISafe\",\"name\":\"safe\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"preCheckData\",\"type\":\"bytes\"}],\"name\":\"postCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISafe\",\"name\":\"safe\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct SafeProtocolAction[]\",\"name\":\"actions\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"metaHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct SafeTransaction\",\"name\":\"tx\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"executionType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"executionMeta\",\"type\":\"bytes\"}],\"name\":\"preCheck\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"preCheckData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISafe\",\"name\":\"safe\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct SafeProtocolAction\",\"name\":\"action\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"metaHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct SafeRootAccess\",\"name\":\"rootAccess\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"executionType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"executionMeta\",\"type\":\"bytes\"}],\"name\":\"preCheckRootAccess\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"preCheckData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"postCheck(address,bool,bytes)\":{\"details\":\"Add custom logic in this function to validate the post-state after the transaction is executed.\",\"params\":{\"preCheckData\":\"Arbitrary length bytes that was returned by during pre-check of the transaction.\",\"safe\":\"ISafe\",\"success\":\"bool\"}},\"preCheck(address,((address,uint256,bytes)[],uint256,bytes32),uint256,bytes)\":{\"details\":\"Add custom logic in this function to validate the pre-state and contents of transaction for non-root access.\",\"params\":{\"executionMeta\":\"Arbitrary length of bytes\",\"executionType\":\"uint256\",\"safe\":\"A Safe instance\",\"tx\":\"A struct of type SafeTransaction that contains the details of the transaction.\"},\"returns\":{\"preCheckData\":\"bytes\"}},\"preCheckRootAccess(address,((address,uint256,bytes),uint256,bytes32),uint256,bytes)\":{\"details\":\"Add custom logic in this function to validate the pre-state and contents of transaction for root access.\",\"params\":{\"executionMeta\":\"bytes\",\"executionType\":\"uint256\",\"rootAccess\":\"DataTypes.SafeRootAccess\",\"safe\":\"A Safe instance\"},\"returns\":{\"preCheckData\":\"bytes\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"postCheck(address,bool,bytes)\":{\"notice\":\"A function that will be called by a safe after the execution of a transaction if the hooks are enabled. Hooks should revert if the post state of after the transaction is not as expected.\"},\"preCheck(address,((address,uint256,bytes)[],uint256,bytes32),uint256,bytes)\":{\"notice\":\"A function that will be called by a Safe before the execution of a transaction if the hooks are enabled\"},\"preCheckRootAccess(address,((address,uint256,bytes),uint256,bytes32),uint256,bytes)\":{\"notice\":\"A function that will be called by a safe before the execution of a transaction if the hooks are enabled and         transaction requies tool access.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TestHook.sol\":\"TestHook\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@safe-global/safe-core-protocol/contracts/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.18;\\n\\nstruct SafeProtocolAction {\\n    address payable to;\\n    uint256 value;\\n    bytes data;\\n}\\n\\nstruct SafeTransaction {\\n    SafeProtocolAction[] actions;\\n    uint256 nonce;\\n    bytes32 metaHash;\\n}\\n\\nstruct SafeRootAccess {\\n    SafeProtocolAction action;\\n    uint256 nonce;\\n    bytes32 metaHash;\\n}\\n\",\"keccak256\":\"0xd06d030a904b0d962f3ecd294a6c290c2d336d5df44b6f7a88b35bc9e7b10a0e\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-core-protocol/contracts/interfaces/Accounts.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.18;\\n\\n/**\\n * @title ISafe Declares the functions that are called on a Safe by Safe protocol.\\n */\\ninterface ISafe {\\n    function execTransactionFromModule(\\n        address payable to,\\n        uint256 value,\\n        bytes calldata data,\\n        uint8 operation\\n    ) external returns (bool success);\\n\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        uint8 operation\\n    ) external returns (bool success, bytes memory returnData);\\n}\\n\",\"keccak256\":\"0x46ab51acf3f12d9dd20d2a0324553e24897e49385dd4a49c7e0cb06cff2611c0\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-core-protocol/contracts/interfaces/Integrations.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.18;\\nimport {ISafe} from \\\"./Accounts.sol\\\";\\nimport {SafeTransaction, SafeRootAccess} from \\\"../DataTypes.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title ISafeProtocolStaticFunctionHandler - An interface that a Safe functionhandler should implement\\n * @notice In Safe protocol, a function handler can be used to add additional functionality to a Safe.\\n *         TODO: Add more explaination.\\n */\\ninterface ISafeProtocolFunctionHandler {\\n    /**\\n     * @notice TODO: Add more explaination\\n     * @param safe A Safe instance\\n     * @param sender Address of the sender\\n     * @param value Amount of ETH\\n     * @param data Arbitrary length bytes\\n     * @return result Arbitrary length bytes containing result of the operation\\n     */\\n    function handle(ISafe safe, address sender, uint256 value, bytes calldata data) external returns (bytes memory result);\\n}\\n\\n/**\\n * @title ISafeProtocolStaticFunctionHandler - An interface that a Safe functionhandler should implement in case when handling static calls\\n * @notice In Safe protocol, a function handler can be used to add additional functionality to a Safe.\\n *         TODO: Add more explaination.\\n */\\ninterface ISafeProtocolStaticFunctionHandler {\\n    /**\\n     * @notice TODO: Add more explaination\\n     * @param safe A Safe instance\\n     * @param sender Address of the sender\\n     * @param value Amount of ETH\\n     * @param data Arbitrary length bytes\\n     * @return result Arbitrary length bytes containing result of the operation\\n     */\\n    function handle(ISafe safe, address sender, uint256 value, bytes calldata data) external view returns (bytes memory result);\\n}\\n\\n/**\\n * @title ISafeProtocolHooks - An interface that a contract should implement to be enabled as hooks.\\n * @notice In Safe protocol, hooks can approve or deny transactions based on the logic it implements.\\n */\\ninterface ISafeProtocolHooks is IERC165 {\\n    /**\\n     * @notice A function that will be called by a Safe before the execution of a transaction if the hooks are enabled\\n     * @dev Add custom logic in this function to validate the pre-state and contents of transaction for non-root access.\\n     * @param safe A Safe instance\\n     * @param tx A struct of type SafeTransaction that contains the details of the transaction.\\n     * @param executionType uint256\\n     * @param executionMeta Arbitrary length of bytes\\n     * @return preCheckData bytes\\n     */\\n    function preCheck(\\n        ISafe safe,\\n        SafeTransaction calldata tx,\\n        uint256 executionType,\\n        bytes calldata executionMeta\\n    ) external returns (bytes memory preCheckData);\\n\\n    /**\\n     * @notice A function that will be called by a safe before the execution of a transaction if the hooks are enabled and\\n     *         transaction requies tool access.\\n     * @dev Add custom logic in this function to validate the pre-state and contents of transaction for root access.\\n     * @param safe A Safe instance\\n     * @param rootAccess DataTypes.SafeRootAccess\\n     * @param executionType uint256\\n     * @param executionMeta bytes\\n     * @return preCheckData bytes\\n     */\\n    function preCheckRootAccess(\\n        ISafe safe,\\n        SafeRootAccess calldata rootAccess,\\n        uint256 executionType,\\n        bytes calldata executionMeta\\n    ) external returns (bytes memory preCheckData);\\n\\n    /**\\n     * @notice A function that will be called by a safe after the execution of a transaction if the hooks are enabled. Hooks should revert if the post state of after the transaction is not as expected.\\n     * @dev Add custom logic in this function to validate the post-state after the transaction is executed.\\n     * @param safe ISafe\\n     * @param success bool\\n     * @param preCheckData Arbitrary length bytes that was returned by during pre-check of the transaction.\\n     */\\n    function postCheck(ISafe safe, bool success, bytes calldata preCheckData) external;\\n}\\n\\n/**\\n * @title ISafeProtocolPlugin - An interface that a Safe plugin should implement\\n */\\ninterface ISafeProtocolPlugin {\\n    /**\\n     * @notice A funtion that returns name of the plugin\\n     * @return name string name of the plugin\\n     */\\n    function name() external view returns (string memory name);\\n\\n    /**\\n     * @notice A funtion that returns version of the plugin\\n     * @return version string version of the plugin\\n     */\\n    function version() external view returns (string memory version);\\n\\n    /**\\n     * @notice A funtion that returns version of the plugin.\\n     *         TODO: Define types of meta provider and possible values of location in each of the cases.\\n     * @return providerType uint256 Type of meta provider\\n     * @return location bytes\\n     */\\n    function metaProvider() external view returns (uint256 providerType, bytes memory location);\\n\\n    /**\\n     * @notice A function that indicates if the plugin requires root access to a Safe.\\n     * @return requiresRootAccess True if root access is required, false otherwise.\\n     */\\n    function requiresRootAccess() external view returns (bool requiresRootAccess);\\n}\\n\",\"keccak256\":\"0xc761fbe6d3f2fceb7d7072931acdfa1704f7a78d6d5aed052bd9530d9d6797ee\",\"license\":\"LGPL-3.0-only\"},\"contracts/TestHook.sol\":{\"content\":\"import {ISafeProtocolHooks} from \\\"@safe-global/safe-core-protocol/contracts/interfaces/Integrations.sol\\\";\\nimport {ISafe} from \\\"@safe-global/safe-core-protocol/contracts/interfaces/Accounts.sol\\\";\\nimport {SafeTransaction} from \\\"@safe-global/safe-core-protocol/contracts/DataTypes.sol\\\";\\nimport {SafeRootAccess} from \\\"@safe-global/safe-core-protocol/contracts/DataTypes.sol\\\";\\n\\ncontract TestHook is ISafeProtocolHooks {\\n\\n    event PreCheckCalled(address sender, uint256 executionType, bytes executionMeta);\\n    event PostCheckCalled(address sender, bool success, bytes preCheckData);\\n    event PreCheckRootAccessCalled(address sender, uint256 executionType, bytes executionMeta);\\n\\n    /**\\n     * @notice A function that will be called by a Safe before the execution of a transaction if the hooks are enabled\\n     * @dev Add custom logic in this function to validate the pre-state and contents of transaction for non-root access.\\n     * @param safe A Safe instance\\n     * @param tx A struct of type SafeTransaction that contains the details of the transaction.\\n     * @param executionType uint256\\n     * @param executionMeta Arbitrary length of bytes\\n     * @return preCheckData bytes\\n     */\\n    function preCheck(\\n        ISafe safe,\\n        SafeTransaction calldata tx,\\n        uint256 executionType,\\n        bytes calldata executionMeta\\n    ) external returns (bytes memory preCheckData) {\\n        emit PreCheckCalled(msg.sender, executionType, executionMeta);\\n    }\\n\\n    /**\\n     * @notice A function that will be called by a safe before the execution of a transaction if the hooks are enabled and\\n     *         transaction requies tool access.\\n     * @dev Add custom logic in this function to validate the pre-state and contents of transaction for root access.\\n     * @param safe A Safe instance\\n     * @param rootAccess DataTypes.SafeRootAccess\\n     * @param executionType uint256\\n     * @param executionMeta bytes\\n     * @return preCheckData bytes\\n     */\\n    function preCheckRootAccess(\\n        ISafe safe,\\n        SafeRootAccess calldata rootAccess,\\n        uint256 executionType,\\n        bytes calldata executionMeta\\n    ) external returns (bytes memory preCheckData) {\\n        emit PreCheckRootAccessCalled(msg.sender, executionType, executionMeta);\\n    }\\n\\n    /**\\n     * @notice A function that will be called by a safe after the execution of a transaction if the hooks are enabled. Hooks should revert if the post state of after the transaction is not as expected.\\n     * @dev Add custom logic in this function to validate the post-state after the transaction is executed.\\n     * @param safe ISafe\\n     * @param success bool\\n     * @param preCheckData Arbitrary length bytes that was returned by during pre-check of the transaction.\\n     */\\n    function postCheck(ISafe safe, bool success, bytes calldata preCheckData) external {\\n        emit PostCheckCalled(msg.sender, success, preCheckData);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return true;\\n    }\\n}\",\"keccak256\":\"0xf6d787de459bc8c882bce3623e382edc9e4073ef8750c29c9e861399ca42d687\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"postCheck(address,bool,bytes)":{"notice":"A function that will be called by a safe after the execution of a transaction if the hooks are enabled. Hooks should revert if the post state of after the transaction is not as expected."},"preCheck(address,((address,uint256,bytes)[],uint256,bytes32),uint256,bytes)":{"notice":"A function that will be called by a Safe before the execution of a transaction if the hooks are enabled"},"preCheckRootAccess(address,((address,uint256,bytes),uint256,bytes32),uint256,bytes)":{"notice":"A function that will be called by a safe before the execution of a transaction if the hooks are enabled and         transaction requies tool access."}},"version":1}}}}}}